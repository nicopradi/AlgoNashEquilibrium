# Data Stackelberg game with capacity, continuous price
import numpy as np

def getData():
    ''' Construct a dictionary containing all the data_file
        Returns:
            dict          dictionarry containing all the data
    '''
    # Initialize the output dictionary
    dict = {}

    # Number of alternatives in the choice set (without considering opt-out)
    dict['I'] = 2

    # Number of customers
    dict['N'] = 5

    # Number of draws
    dict['R'] = 50

    # Lower and upper bound on prices
    dict['lb_p'] = np.array([0, 0.00, 0.00]) # lower bound (FSP, PSP, PUP)
    dict['ub_p'] = np.array([0, 1.00, 1.00]) # upper bound (FSP, PSP, PUP)

    # Parameters choice model
    dict['ASC_PSP'] = 32
    dict['ASC_PUP'] = 34
    dict['Beta_TD'] = -0.612
    dict['Beta_Origin'] = -5.762
    dict['Beta_Age_Veh'] = 4.037
    dict['Beta_FEE_INC_PSP'] = -10.995
    dict['Beta_FEE_RES_PSP'] = -11.440
    dict['Beta_FEE_INC_PUP'] = -13.729
    dict['Beta_FEE_RES_PUP'] = -10.668

    # AT coefficient
    dict['Beta_AT'] = -0.788

    # FEE coefficient
    dict['Beta_FEE'] = -32.328

    # Random term (Gumbel distribution (0,1)) - 3 alternatives x 5 customers x 50 draws
    dict['xi'] = np.array([[[  8.88287700e-01,  -7.50947600e-01,  -1.97780310e+00,
          -1.52697500e+00,  -2.28565400e-01,   3.69475400e-01,
          -3.11329200e-01,  -1.86434340e+00,   2.49625300e-01,
          -9.74791600e-01,  -6.61659400e-01,  -1.94760910e+00,
          -1.79748070e+00,   1.00720370e+00,  -7.64116500e-01,
          -7.27799800e-01,  -6.00411600e-01,   3.73260600e-01,
           9.71175000e-01,   5.87978700e-01,   9.19574500e-01,
          -4.84287100e-01,  -5.87997200e-01,   7.72983300e-01,
          -9.13005200e-01,  -2.34323060e+00,  -4.11420300e-01,
          -5.11232400e-01,  -3.21986320e+00,  -2.07697040e+00,
          -1.19174400e-01,  -1.50678270e+00,  -1.62198470e+00,
          -2.36050740e+00,   4.36499000e-02,  -1.03294360e+00,
          -1.14472700e-01,   2.04545300e-01,  -3.31371200e-01,
          -1.34757150e+00,   3.20861000e-01,   6.99485000e-02,
          -1.84671300e+00,  -9.72856000e-02,   7.64780000e-03,
          -2.89460200e-01,  -2.26403420e+00,   5.27071900e-01,
           1.22395040e+00,   6.65196800e-01],
        [  7.87100900e-01,  -1.17984050e+00,  -1.25745560e+00,
          -4.08293730e+00,  -2.67520760e+00,  -3.54100300e-01,
          -1.18916660e+00,  -2.30427340e+00,   4.00527800e-01,
           6.72005400e-01,   1.79706660e+00,  -2.69629740e+00,
          -2.06943890e+00,   5.06786700e-01,  -1.73733180e+00,
           2.91308500e-01,  -1.07421180e+00,   1.08868540e+00,
          -1.30801090e+00,  -1.46972630e+00,   2.18924000e-02,
           4.85919800e-01,   4.04956100e-01,  -1.04064870e+00,
           5.67263400e-01,  -5.84336400e-01,  -5.73781500e-01,
          -7.12508000e-01,  -4.42968100e-01,  -6.51742500e-01,
          -4.72708500e-01,  -5.76108000e-01,   1.29122410e+00,
          -1.91527300e-01,  -1.24848990e+00,   8.07285600e-01,
          -2.62050000e-02,   8.57243400e-01,   7.06841500e-01,
          -1.77881600e-01,   3.94622900e-01,  -7.68070800e-01,
          -1.75668300e-01,  -4.22454000e-02,  -3.47792110e+00,
          -1.70007210e+00,   7.82520700e-01,  -1.70007210e+00,
           6.02634500e-01,   5.95364000e-01],
        [ -6.79779200e-01,  -2.45967080e+00,  -4.59924600e-01,
          -6.70447900e-01,  -2.53461080e+00,  -1.65552600e+00,
          -3.37124000e-01,  -1.65185480e+00,   3.69086200e-01,
           3.26979800e-01,  -3.13036940e+00,  -6.51742500e-01,
           1.41282630e+00,   2.49625300e-01,  -5.12858700e-01,
           3.11729300e-01,  -4.33058770e+00,   4.63287000e-02,
          -1.12157270e+00,   4.17219100e-01,  -6.35385000e-02,
          -1.65113970e+00,   7.48818000e-02,  -4.74488100e-01,
           1.30481020e+00,  -1.47949860e+00,  -1.02472550e+00,
          -1.64914710e+00,  -2.01715300e-01,  -1.67176960e+00,
          -1.73733180e+00,  -1.15275800e+00,   1.31618070e+00,
          -2.18870010e+00,   3.49999800e-01,  -2.78396000e-01,
           2.26240900e-01,  -2.39793920e+00,   1.02463600e-01,
          -3.60170600e-01,  -3.04913610e+00,   5.44577700e-01,
          -2.86737500e-01,  -1.27901610e+00,  -1.40683000e-02,
          -8.34070000e-02,  -2.82204740e+00,   5.20350000e-02,
          -1.82628970e+00,   6.72484900e-01],
        [  7.38013900e-01,   6.84739000e-01,  -7.00699200e-01,
          -5.59940000e-02,  -1.94849720e+00,  -3.54297500e-01,
          -2.78866000e-02,   1.76091200e+00,  -6.73836500e-01,
          -2.24024090e+00,  -1.97497600e-01,  -1.80567790e+00,
          -6.68603900e-01,  -1.83764660e+00,   4.00527800e-01,
           1.46302880e+00,   2.28233400e-01,  -1.96958200e-01,
          -6.50664200e-01,   4.76963100e-01,  -3.60865300e-01,
          -1.13118900e-01,   3.73260600e-01,  -1.83997560e+00,
          -1.72296200e-01,  -4.01843600e-01,  -3.12022500e-01,
          -6.24288900e-01,  -4.36111890e+00,  -9.51234100e-01,
          -1.78511000e-01,   5.87978700e-01,   6.15831500e-01,
          -1.31017720e+00,   7.25556000e-01,  -8.84671100e-01,
           1.01577100e-01,   1.04733800e-01,  -1.62366990e+00,
          -1.20224910e+00,  -1.13016130e+00,  -1.81079270e+00,
          -1.72365570e+00,   2.53159200e-01,  -4.93626400e-01,
          -8.44977300e-01,  -6.99294000e-02,   9.61240100e-01,
          -4.80618100e-01,  -7.57942500e-01],
        [  6.96066300e-01,  -1.96835730e+00,  -8.14588000e-01,
          -2.81923500e-01,  -8.50216400e-01,   1.10445850e+00,
          -4.17171000e-02,  -1.18916660e+00,  -1.27406760e+00,
           7.07207300e-01,  -1.23086970e+00,  -3.22006040e+00,
           1.09996970e+00,   6.97872500e-01,   1.20109360e+00,
           3.99451000e-01,   1.05328760e+00,  -2.17443380e+00,
          -1.05032900e-01,  -9.23874000e-01,  -3.09155100e-01,
          -8.26739300e-01,  -3.96294500e-01,   1.08747280e+00,
          -1.99878550e+00,   5.60186200e-01,  -3.54691460e+00,
          -4.44063400e-01,   1.95969000e-01,  -2.16912170e+00,
          -4.47014300e-01,  -2.10218530e+00,  -6.41615000e-02,
           7.87100900e-01,  -1.00944720e+00,  -1.84840730e+00,
          -1.19191650e+00,  -2.28197000e-02,  -3.56476690e+00,
           3.91066500e-01,  -1.71147090e+00,   1.12774600e-01,
          -2.17423100e-01,  -8.24998800e-01,  -9.93352800e-01,
          -3.67598900e-01,  -1.91275930e+00,   1.04442970e+00,
          -1.32531870e+00,  -1.32889850e+00]],

       [[ -1.59205810e+00,  -9.67603200e-01,  -3.46953000e-02,
          -2.00417500e-01,  -1.18792280e+00,  -2.42472810e+00,
           3.14348000e-02,  -7.33809000e+00,  -2.68996800e+00,
          -3.08301260e+00,  -4.62562000e-02,  -7.68070800e-01,
          -1.04003370e+00,  -5.77349000e-01,  -4.44063400e-01,
          -1.83435750e+00,   2.69856400e-01,  -9.25771700e-01,
           1.29598770e+00,   9.92217300e-01,   2.31057700e-01,
          -1.29879520e+00,  -3.76101540e+00,   1.29938530e+00,
          -2.35378780e+00,   2.38658000e-01,  -1.64914710e+00,
          -1.10035300e-01,  -4.52870700e-01,   1.20109360e+00,
          -1.06292800e-01,  -2.63403600e-01,   4.49999700e-01,
           1.19061300e+00,  -8.59489500e-01,  -3.42244000e-01,
          -8.58154700e-01,  -3.31371200e-01,  -6.03403900e-01,
          -1.12529380e+00,   2.53715600e-01,   6.10019700e-01,
           1.91087000e-01,  -3.85637100e-01,  -1.22217550e+00,
          -1.95068120e+00,  -2.14733490e+00,  -5.85119900e-01,
          -8.47355500e-01,  -9.79459300e-01],
        [ -1.28199060e+00,   1.20811900e-01,  -1.54092350e+00,
          -1.72598790e+00,  -9.74563700e-01,  -3.70346400e-01,
          -7.41189600e-01,  -7.50126700e-01,  -1.81216030e+00,
           4.91239500e-01,  -2.32962350e+00,  -2.46623430e+00,
          -3.40758700e-01,  -4.39576200e-01,   6.37400100e-01,
           7.71144400e-01,  -8.96302200e-01,  -1.23877900e-01,
          -1.03116000e+00,   1.01917950e+00,   6.48057600e-01,
          -8.42242100e-01,  -5.08729000e-01,   1.15782660e+00,
          -2.34323060e+00,   4.44566900e-01,  -9.34687400e-01,
          -5.01903000e-02,  -1.86966780e+00,   2.46951600e-01,
           7.53497900e-01,  -2.94312320e+00,  -1.82730510e+00,
           3.16193000e-01,   5.46405200e-01,   1.77208900e-01,
          -7.94137000e-02,   9.64200000e-03,  -2.78566310e+00,
          -6.03403900e-01,   5.76780100e-01,  -1.59133100e-01,
          -6.72166100e-01,  -2.35378780e+00,  -1.75017200e-01,
          -7.19764300e-01,  -2.08057520e+00,   7.66202200e-01,
          -2.39659100e+00,   9.01635800e-01],
        [  9.71175000e-01,  -7.22018000e-01,   2.75999000e-02,
           8.89937600e-01,   6.88292100e-01,  -3.13797400e-01,
          -5.73781500e-01,  -1.45473300e-01,   9.41801600e-01,
          -4.30634600e-01,  -9.84352000e-02,  -2.26136100e-01,
          -1.03621600e+00,  -6.75447920e+00,  -1.61152460e+00,
          -4.36776810e+00,  -1.17778900e-01,  -5.91529500e-01,
          -1.30854730e+00,  -2.26482110e+00,  -1.67016680e+00,
          -8.14718200e-01,   3.82450900e-01,   9.01635800e-01,
          -1.19880500e-01,  -9.37662100e-01,  -6.45676500e-01,
          -3.46543200e-01,  -4.78394800e-01,  -1.86694500e-01,
          -5.06705000e-02,  -1.83997560e+00,   6.73733500e-01,
          -2.23572500e-01,  -1.59903370e+00,  -9.39731800e-01,
          -1.01185390e+00,   4.64187000e-01,   8.94875100e-01,
           1.30803440e+00,   1.32171200e-01,  -1.22728660e+00,
          -8.78502600e-01,  -6.43728100e-01,  -1.86334630e+00,
          -1.79733480e+00,  -5.86973900e-01,  -3.31005010e+00,
           1.45962930e+00,  -1.66505150e+00],
        [ -7.93710000e-03,  -6.02862000e-02,  -1.04483110e+00,
           2.91308500e-01,   8.73817700e-01,   6.76412000e-02,
           1.27849290e+00,  -2.34395900e-01,   1.13211000e+00,
           2.52433700e-01,  -2.74753300e-01,  -1.80776500e-01,
          -1.16862240e+00,   7.66202200e-01,  -1.84930020e+00,
          -3.52001420e+00,   9.08193000e-02,   5.46405200e-01,
          -5.31728200e-01,   1.24534900e-01,  -7.75839400e-01,
          -9.91780600e-01,   6.62270900e-01,   1.14667500e-01,
           2.74034000e-01,  -8.26739300e-01,  -7.45566600e-01,
           2.19851900e-01,  -2.30427340e+00,  -8.32127100e-01,
          -7.19128700e-01,   1.02900400e+00,  -1.03977100e-01,
          -1.59903370e+00,   3.35979600e-01,  -6.83327900e-01,
          -1.24900990e+00,  -4.03118760e+00,  -2.53913070e+00,
          -2.17443380e+00,  -1.51413660e+00,  -1.84723700e-01,
          -1.55568680e+00,  -7.64884200e-01,  -1.45114870e+00,
          -9.79623200e-01,  -8.78502600e-01,  -5.06705000e-02,
          -5.33983930e+00,  -2.36735100e-01],
        [ -1.82415800e-01,  -2.20235610e+00,   1.09762060e+00,
           2.68110200e-01,  -4.18352800e-01,  -5.24858500e-01,
          -1.25765600e-01,  -1.03253160e+00,  -7.94815400e-01,
          -1.04418160e+00,   7.28711100e-01,  -2.62050000e-02,
          -3.19119100e-01,  -1.25460400e-01,   4.58604300e-01,
           6.24981600e-01,  -2.57393300e-01,   2.32883100e-01,
           5.22521000e-02,  -7.85195600e-01,   1.15315290e+00,
           7.96335900e-01,   3.35979600e-01,   3.70449600e-01,
          -1.82415800e-01,   6.43113100e-01,   4.73345500e-01,
           1.04419220e+00,   9.36578100e-01,  -1.04483110e+00,
          -5.80931000e-02,  -2.55194400e-01,   3.74592700e-01,
           4.19781100e-01,  -1.04064870e+00,  -6.84642800e-01,
           4.33388900e-01,  -3.95452700e+00,  -2.60491800e-01,
          -2.10710910e+00,  -1.59903370e+00,  -2.55183370e+00,
          -3.47564620e+00,  -9.72010100e-01,   1.50038500e-01,
          -4.24479000e-02,   5.36067400e-01,  -8.92509500e-01,
           1.39881300e-01,  -6.54566200e-01]],

       [[ -4.62562000e-02,   1.47979700e-01,  -3.43605000e-02,
          -9.38623700e-01,  -6.40906000e-02,  -1.30582930e+00,
           5.61495500e-01,  -1.83997560e+00,  -6.30410000e-02,
          -2.71730000e-02,  -1.84840730e+00,  -2.11183250e+00,
          -2.29516460e+00,   7.38068800e-01,  -1.22217550e+00,
          -3.98857710e+00,   5.53731400e-01,   3.11385400e-01,
          -1.87181600e+00,   3.58959800e-01,  -4.01322600e-01,
          -1.41589060e+00,  -2.73557670e+00,  -2.01713830e+00,
           5.22521000e-02,  -2.88082600e-01,  -5.89593600e+00,
          -7.89493900e-01,  -2.82890600e-01,  -4.68413350e+00,
          -3.33905400e-01,   1.42153870e+00,  -1.20079170e+00,
           1.35792810e+00,  -2.44847930e+00,  -5.89554100e-01,
          -1.96721200e-01,   8.37761500e-01,  -2.70119000e-01,
           7.57884300e-01,  -6.39962900e-01,   1.29544510e+00,
          -1.03621600e+00,  -1.49007920e+00,   8.76656100e-01,
           2.87457500e-01,   4.76203000e-01,  -3.15793100e-01,
          -2.61807800e-01,  -2.92704330e+00],
        [  1.11562690e+00,  -1.21512000e-02,   6.44475600e-01,
          -8.40612500e-01,   1.12211520e+00,  -1.73891980e+00,
           3.94622900e-01,  -1.23838620e+00,  -1.12551470e+00,
          -1.47949860e+00,  -8.89654700e-01,  -1.16475830e+00,
          -1.62577910e+00,   4.56974600e-01,  -4.40398000e-02,
           6.94112000e-02,   6.91456800e-01,   5.69848400e-01,
          -9.75858000e-01,   7.25556000e-01,  -1.29888590e+00,
          -1.43645900e+00,   6.17938200e-01,   9.67380700e-01,
          -4.77052480e+00,   1.09645200e+00,  -1.06817750e+00,
          -4.93626400e-01,  -1.75203890e+00,   1.50353000e-01,
           6.00998300e-01,  -2.53521960e+00,  -4.92193400e-01,
           1.96316100e-01,  -5.01903000e-02,   1.96316100e-01,
           1.04856970e+00,  -1.07260100e+00,  -1.69865200e+00,
           1.17264200e-01,   5.69848400e-01,   4.27740000e-03,
          -7.13078800e-01,  -4.55030100e-01,  -2.73350650e+00,
           3.45681300e-01,   6.12679800e-01,   6.23678800e-01,
           2.74327800e-01,   1.53264620e+00],
        [ -6.32415100e-01,   2.25943100e-01,  -7.40090400e-01,
          -2.13168700e-01,  -1.70538960e+00,   1.23521680e+00,
          -7.00699200e-01,  -1.11981760e+00,  -1.45215700e-01,
          -7.78995000e-01,   5.08734500e-01,  -5.59483600e-01,
          -4.67554940e+00,   1.01892330e+00,  -2.74186800e-01,
          -1.93156800e-01,   1.10445850e+00,  -1.85939090e+00,
           9.67380700e-01,  -1.31017720e+00,  -1.19048320e+00,
          -1.41193030e+00,   1.62245030e+00,  -3.32001030e+00,
           8.81990400e-01,   8.59682800e-01,   1.62245030e+00,
          -2.66099270e+00,  -2.30349360e+00,   1.97204200e-01,
           1.61647830e+00,   4.91110000e-01,  -1.84493290e+00,
           5.15978300e-01,   6.43209800e-01,   9.32221100e-01,
           1.17152950e+00,  -1.03278990e+00,  -2.55600100e-01,
          -4.36819790e+00,   5.67564600e-01,  -8.93237400e-01,
           9.70896800e-01,  -2.75180000e-03,   4.20503200e-01,
           6.79001000e-01,  -5.12790000e-02,   7.17271000e-02,
           1.01620000e-01,   5.04776500e-01],
        [ -1.41763100e-01,   6.34473800e-01,  -2.34471800e-01,
          -1.02896670e+00,  -7.02813000e-02,  -5.51661000e-01,
          -8.66525200e-01,  -2.60387500e-01,  -1.39214200e+00,
           6.33698800e-01,   4.24838100e-01,  -1.49580310e+00,
          -3.04913610e+00,  -2.19220650e+00,   1.02809980e+00,
          -1.89564500e-01,   7.86724400e-01,  -5.18078000e-02,
           2.41604200e-01,  -6.86838200e-01,  -1.36845000e+00,
          -2.08057520e+00,  -5.11232400e-01,   6.86006000e-01,
          -1.51145030e+00,   1.87748900e-01,   4.46380500e-01,
          -2.86737500e-01,   1.72610000e-01,  -8.88650500e-01,
          -4.92400800e-01,   1.29775260e+00,   1.56630700e-01,
           1.52078530e+00,   7.14006000e-02,  -9.56497200e-01,
          -2.52989100e-01,   6.01681400e-01,  -3.64554000e-01,
          -1.15173350e+00,   6.94560000e-02,  -5.76349560e+00,
          -4.92400800e-01,   3.19561100e-01,   7.50342000e-02,
          -1.09422600e-01,   1.21643910e+00,  -1.57872890e+00,
          -5.45301230e+00,  -5.82003500e-01],
        [ -1.03796570e+00,  -2.82204740e+00,  -2.39050610e+00,
           1.20426070e+00,  -2.17527750e+00,  -7.98768500e-01,
           6.01065800e-01,   4.97720200e-01,  -1.00460950e+00,
          -1.26898610e+00,   1.40359880e+00,  -1.35535680e+00,
           2.59450100e-01,   2.66454000e-02,  -2.65395700e-01,
           6.36863000e-02,   2.94193000e-01,  -3.83398000e-01,
          -2.01892730e+00,  -1.02524530e+00,  -5.97179200e-01,
           9.17723100e-01,  -4.95338600e-01,  -2.07370300e-01,
          -5.50657000e-02,  -5.97925100e-01,   1.03008390e+00,
           2.22956100e-01,  -1.12306840e+00,   5.49934100e-01,
           1.01632080e+00,   4.87782100e-01,  -2.52989100e-01,
           2.79672300e-01,  -1.49336100e-01,   4.73345500e-01,
          -7.21654000e-02,  -1.27402390e+00,  -6.85492100e-01,
          -4.36819790e+00,  -3.46929300e-01,  -3.80331600e-01,
          -6.34030900e-01,  -1.28582310e+00,  -3.14421100e-01,
          -7.55009300e-01,  -1.17932600e-01,   9.89473000e-01,
          -1.54592180e+00,  -6.38959000e-02]]])

    # Variables choice model
    dict['AT_FSP'] = 10
    dict['TD_FSP'] = 10
    dict['Origin'] = np.array([0, 1, 1, 0, 0])
    dict['AT_PSP'] = 10
    dict['TD_PSP'] = 10
    dict['AT_PUP'] = 5
    dict['TD_PUP'] = 10
    dict['Age_veh'] = np.array([0, 0, 0, 1, 0])
    dict['Low_inc'] = np.array([1, 1, 1, 1, 0])
    dict['Res'] = np.array([1, 1, 1, 0, 1])

    return dict

def preprocess(dict):
    ''' Precomputation on the data in order to create the corresponding
        cplex model.
    '''

    ########## Precomputation ##########

    # Exogene utility
    exo_utility = np.empty([dict['I'] + 1, dict['N']])
    for n in range(dict['N']):
        for i in range(dict['I'] + 1):
            if i == 0:
                # Opt-Out
                exo_utility[i, n] = (dict['Beta_AT'] * dict['AT_FSP'] +
                                       dict['Beta_TD'] * dict['TD_FSP'] +
                                       dict['Beta_Origin'] * dict['Origin'][n])
            elif i == 1:
                # PSP
                exo_utility[i, n] = (dict['ASC_PSP'] +
                                       dict['Beta_AT'] * dict['AT_PSP'] +
                                       dict['Beta_TD'] * dict['TD_PSP'])
            else:
                # PUP
                exo_utility[i, n] = (dict['ASC_PUP'] +
                                       dict['Beta_AT'] * dict['AT_PUP'] +
                                       dict['Beta_TD'] * dict['TD_PUP'] +
                                       dict['Beta_Age_Veh'] * dict['Age_veh'][n])
    dict['ExoUtility'] = exo_utility

    # Beta coefficient for endogenous variables
    beta_FEE_PSP = np.empty([dict['N']])
    beta_FEE_PUP = np.empty([dict['N']])
    for n in range(dict['N']):
        beta_FEE_PSP[n] = (dict['Beta_FEE'] +
                             dict['Beta_FEE_INC_PSP'] * dict['Low_inc'][n] +
                             dict['Beta_FEE_RES_PSP'] * dict['Res'][n])
        beta_FEE_PUP[n] = (dict['Beta_FEE'] +
                             dict['Beta_FEE_INC_PUP'] * dict['Low_inc'][n] +
                             dict['Beta_FEE_RES_PUP'] * dict['Res'][n])
    dict['EndoCoef'] = np.array([np.zeros([dict['N']]), beta_FEE_PSP, beta_FEE_PUP])

    # Calculate bounds on the utility
    lb_U = np.empty([dict['I'] + 1, dict['N'], dict['R']])
    ub_U = np.empty([dict['I'] + 1, dict['N'], dict['R']])
    lb_Umin = np.full((dict['N'], dict['R']), np.inf)
    ub_Umax = np.full((dict['N'], dict['R']), -np.inf)
    M = np.empty([dict['N'], dict['R']])
    for n in range(dict['N']):
        for r in range(dict['R']):
            for i in range(dict['I'] + 1):
                    if dict['EndoCoef'][i, n] > 0:
                        lb_U[i, n, r] = (dict['EndoCoef'][i, n] * dict['lb_p'][i] +
                                        dict['ExoUtility'][i, n] + dict['xi'][i, n, r])
                        ub_U[i, n, r] = (dict['EndoCoef'][i, n] * dict['ub_p'][i] +
                                        dict['ExoUtility'][i, n] + dict['xi'][i, n, r])
                    else:
                        lb_U[i, n, r] = (dict['EndoCoef'][i, n] * dict['ub_p'][i] +
                                        dict['ExoUtility'][i, n] + dict['xi'][i, n, r])
                        ub_U[i, n, r] = (dict['EndoCoef'][i, n] * dict['lb_p'][i] +
                                        dict['ExoUtility'][i, n] + dict['xi'][i, n, r])
                    # Bound for each customer, for each draw
                    if lb_U[i, n, r] < lb_Umin[n, r]:
                        lb_Umin[n, r] = lb_U[i, n, r]
                    if ub_U[i, n, r] > ub_Umax[n, r]:
                        ub_Umax[n, r] = ub_U[i, n, r]

            # Calcule the big-M values
            M[n, r] = ub_Umax[n, r] - lb_Umin[n, r]
    dict['lb_U'] = lb_U
    dict['ub_U'] = ub_U
    dict['lb_Umin'] = lb_Umin
    dict['ub_Umax'] = ub_Umax
    dict['M'] = M

if __name__ == '__main__':
    dict = getData()
    preprocess(dict)

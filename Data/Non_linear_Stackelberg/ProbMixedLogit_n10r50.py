# Data Stackelberg game with capacity, continuous price
import numpy as np

def getData():
    ''' Construct a dictionary containing all the data_file
        Returns:
            dict          dictionarry containing all the data
    '''
    # Initialize the output dictionary
    dict = {}

    # Number of alternatives in the choice set (without considering opt-out)
    dict['I'] = 2

    # Number of customers
    dict['N'] = 10

    # Number of coef draws
    dict['R_coef'] = 50

    # Lower and upper bound on prices
    dict['lb_p'] = np.array([0, 0.0, 0.0]) # lower bound (FSP, PSP, PUP)
    dict['ub_p'] = np.array([0, 1.0, 1.0]) # upper bound (FSP, PSP, PUP)

    #dict['capacity'] = np.array([60.0, 4.0, 4.0]) # Availability for each alternative (opt-out always available)
    # Choice set of the customers
    #	 		           n1 n2 n3...
    dict['choice_set'] = np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # OPT-OUT
                       			  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # PSP
                    	 		  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])  # PUP

    # Parameters choice model
    dict['ASC_PSP'] = 32
    dict['ASC_PUP'] = 34
    dict['Beta_TD'] = -0.612
    dict['Beta_Origin'] = -5.762
    dict['Beta_Age_Veh'] = 4.037
    dict['Beta_FEE_INC_PSP'] = -10.995
    dict['Beta_FEE_RES_PSP'] = -11.440
    dict['Beta_FEE_INC_PUP'] = -13.729
    dict['Beta_FEE_RES_PUP'] = -10.668

    # AT coefficient (10 customers x 50 draws)
    dict['Beta_AT'] = np.array([[-1.21265711e+00, -8.84159170e-01,  6.04289002e-01,
        -3.76388980e+00, -1.10858366e+00,  8.44117085e-01,
        -1.76918520e+00, -8.92960465e-01,  8.44830025e-02,
        -7.35708486e-01, -1.42370547e+00, -6.82185643e-01,
        -2.11679836e-01, -8.12802462e-01, -2.17428976e+00,
        -2.41734831e+00, -9.11732429e-01, -6.08273235e-01,
        -1.76639284e+00,  2.30932242e-01,  2.61123788e-02,
         1.37497717e+00, -1.26728519e+00, -2.60919756e-01,
         1.18424379e+00,  2.31579572e-01,  8.50364162e-01,
        -4.16907384e-01, -1.11878089e+00, -6.22557122e-01,
        -4.42131319e-01, -1.71815718e+00, -9.86952103e-01,
        -3.28300999e-01, -1.80968123e+00,  1.57048332e+00,
        -2.26840508e+00, -8.04812385e-01,  3.73001695e-01,
         1.83048098e+00,  7.93435362e-01,  6.48746828e-01,
        -2.02766156e+00, -1.68368375e+00, -1.60276409e+00,
         4.86577812e-01, -1.27875741e-01,  2.17923832e-02,
        -4.81826068e-01, -1.80814875e-01],
       [-1.45773895e+00, -2.47189749e+00, -1.23703954e+00,
        -1.86651051e+00, -3.76321530e-01,  3.18942488e-01,
        -7.35187453e-01, -4.64212660e-01, -2.41282070e+00,
         5.43067806e-01, -4.47967628e-01, -3.90535215e-01,
        -9.83229530e-03, -8.76504247e-01, -1.46621794e+00,
        -7.90704432e-01,  4.42686647e-01, -8.92124563e-01,
        -2.11332202e+00, -2.56091625e+00, -2.54775906e+00,
        -8.13037853e-01,  2.04458504e-01, -1.10068708e+00,
        -8.38414478e-01,  7.21444332e-01, -5.34366981e-01,
        -8.18517549e-01, -1.48399674e+00, -6.88622031e-01,
        -2.16625454e+00, -8.70683935e-02,  5.73018778e-02,
        -6.45513509e-01, -1.52214282e+00,  2.33903065e-01,
        -9.80694314e-01,  1.67868973e+00, -1.88288903e+00,
        -1.69959498e+00, -1.17175294e+00, -1.55937351e+00,
        -5.99537183e-01, -1.06893810e-03, -1.93718847e+00,
        -8.33106122e-01,  1.02217483e+00, -1.15415070e+00,
        -1.36743437e+00,  6.72046520e-01],
       [-2.34639238e+00, -2.67061178e+00, -4.81289381e-01,
        -1.09199307e-01,  4.35754212e-01, -6.51889550e-01,
        -7.40328553e-01,  1.93918034e+00, -1.45668537e+00,
        -1.04493378e+00, -1.09709187e+00, -6.96397865e-01,
         1.42105386e+00, -8.79458670e-01, -1.07781942e+00,
         7.87195744e-01, -6.48851263e-01, -7.96778372e-01,
         2.22121966e+00, -8.54970280e-01, -1.81377869e+00,
         1.04422533e+00, -1.52963130e+00, -8.38045362e-01,
         1.04592291e+00,  6.03217333e-01, -9.63957914e-01,
        -6.55019444e-01, -1.24965108e+00, -1.74305559e+00,
         1.97235341e-01,  4.36208283e-01,  5.83455940e-01,
        -1.79854311e+00, -2.83146475e-01, -1.07623590e+00,
        -5.55007473e-01, -3.17285571e-01, -4.04915073e-01,
         1.42793606e+00, -1.56311505e+00,  6.26868702e-01,
         3.90037493e-01, -2.33643086e+00,  6.05563331e-01,
        -4.34989806e-01,  2.81817156e+00, -9.36978993e-01,
        -2.30629403e+00,  1.93811978e+00],
       [-3.18035793e+00, -8.64094929e-01, -4.54989321e-01,
        -1.35942833e+00, -3.77400992e-01, -2.37241453e+00,
        -1.61961892e+00, -2.03925183e+00, -1.98233749e+00,
         1.61046425e-01, -1.47307612e+00, -1.09195357e+00,
        -1.48028966e-01, -2.32493645e+00,  5.83679764e-01,
        -5.25042770e-03, -6.69473090e-03, -9.52033595e-01,
        -1.59602033e+00, -1.04959245e+00, -2.69152254e-01,
        -4.39699726e-01,  8.51114363e-01, -6.78082914e-01,
        -2.93464364e+00, -9.40858475e-01, -9.13518609e-01,
        -6.46495137e-02,  2.57011165e+00, -2.60912500e-01,
        -1.73223743e+00,  8.76835039e-01,  3.30006298e-01,
        -2.11561821e+00, -9.67878079e-01, -1.98010353e+00,
        -1.49787902e+00, -1.39696608e+00,  1.08036759e-01,
        -1.53228527e+00,  5.71546716e-01, -4.07346811e-01,
        -7.15721493e-01, -3.87288660e-01, -4.31342215e-01,
         9.10025921e-01,  3.25360276e-01, -5.25607849e-01,
         8.43072077e-02, -9.73785987e-01],
       [-7.48363945e-01, -2.50198330e+00, -1.52811937e+00,
        -2.02954978e+00,  1.44644527e-01, -2.42797910e+00,
        -1.34003132e+00,  2.63949529e-01, -3.33396578e+00,
        -1.34057801e+00, -7.22218912e-01, -2.10176249e+00,
        -2.24280958e+00, -1.11671646e+00,  6.47738308e-01,
        -1.90647389e+00,  2.47939540e-01, -2.87935737e+00,
        -6.58300443e-01, -7.76227407e-01, -1.08671797e+00,
        -1.10034165e+00, -8.21408466e-01, -1.35317590e+00,
         4.08811567e-01, -1.23555489e+00, -7.63585732e-01,
        -3.05111207e-01, -1.12457571e+00, -1.03321819e+00,
         1.85804590e-01,  8.32328507e-01,  6.34629699e-01,
         2.80534617e-02, -1.23459935e+00, -5.67720234e-01,
        -3.43622342e-01, -2.17831565e+00, -7.30304511e-01,
        -1.08838427e+00,  5.13004853e-02,  2.07312343e-01,
        -1.33947069e+00, -1.40330777e-01, -2.53383848e+00,
        -6.16975060e-01,  2.66997268e-01, -5.58376316e-01,
        -1.17318474e+00,  8.82648870e-03],
       [ 1.02183777e+00, -7.22214687e-01,  6.49857324e-01,
        -2.26337542e-01, -1.61861912e+00, -4.07071485e-01,
        -1.63585085e+00,  4.30211094e-01,  9.80674752e-02,
        -2.33820333e+00, -1.93081674e+00, -6.39346676e-01,
         3.21505357e-01, -1.31253754e+00, -4.67611718e-01,
        -1.06472891e+00, -2.52644378e+00, -2.50962921e+00,
         1.00175769e-01, -1.31018730e+00, -1.46583824e+00,
        -1.96636604e-01,  4.92554724e-01, -8.95536349e-01,
        -2.37217905e-01, -1.67963080e+00,  4.39770987e-01,
        -1.17770812e+00, -2.09476605e+00, -1.57359190e+00,
        -3.71742307e-01, -1.09032274e+00,  1.33932348e-01,
        -1.20378138e-01, -2.30882235e+00,  8.76272938e-01,
        -1.85523637e+00, -1.60670355e+00, -9.12392719e-01,
        -2.37850689e+00, -1.25679761e+00, -4.48995077e-01,
        -5.60547221e-01, -6.62908761e-01, -1.42013017e+00,
         3.49049332e-01, -4.95184969e-01, -1.33478689e-01,
        -1.84776800e+00, -9.14232254e-01],
       [-4.22543254e-01, -2.24241298e+00, -1.05865319e+00,
        -6.82508467e-01, -6.75073920e-01,  9.98712319e-02,
        -1.41533790e+00,  1.50765306e-01,  1.32129932e-01,
        -4.24168380e-01, -1.61988566e+00, -7.49339237e-02,
        -1.85458329e+00, -8.47224835e-01, -1.48608236e+00,
        -1.29776069e+00, -2.38076613e+00, -2.00494189e+00,
         1.70047990e+00, -3.20880955e-01, -6.48212883e-01,
        -2.72927385e-01, -2.52429839e+00, -8.26027847e-01,
        -1.19057623e+00, -1.56465218e+00, -1.60868378e+00,
         3.03197385e-02, -1.26508070e+00, -1.17660501e+00,
        -6.56262384e-01, -1.36960370e+00, -1.66282326e+00,
        -1.80846322e+00, -9.03554041e-01, -3.37825361e-01,
        -1.47851245e+00,  4.37476962e-02, -5.18386756e-01,
         7.35503702e-01, -6.20280680e-01, -3.05244123e-01,
        -2.54455144e+00,  1.01797643e+00,  5.50529440e-01,
        -6.33468167e-01, -5.50532802e-01, -1.85837016e+00,
         1.36340833e-01, -9.02977356e-02],
       [-1.15698671e+00, -6.67534347e-01, -2.86748533e+00,
        -6.48672958e-01, -7.93103325e-01, -1.36570338e+00,
        -8.85531652e-01, -2.20929954e-01,  7.06465942e-01,
        -2.08019989e+00,  8.58204618e-01,  6.20607858e-01,
         2.53860458e-01, -3.55436307e-01, -7.57520630e-03,
        -6.75840649e-01, -1.03997325e-01, -3.69894568e-01,
         1.74008718e+00, -5.65940023e-01, -1.97235036e-01,
         7.96781076e-01,  4.62236567e-01, -3.34616062e-01,
        -3.45334525e+00, -1.29546797e+00, -1.77393407e+00,
         9.23697363e-01, -6.30605870e-01, -2.79017349e+00,
        -1.40466796e+00, -9.44140643e-01,  8.28457644e-01,
        -1.55932210e+00,  6.12151001e-01, -3.99244913e-01,
        -2.08702170e+00, -1.43453032e+00, -7.79901423e-01,
        -1.60232209e-01, -3.31730755e+00, -4.43923428e-01,
        -1.68981518e+00,  9.31497278e-01, -1.57133512e+00,
        -2.31093551e+00, -1.44422414e-01, -4.27655312e-01,
        -6.47459808e-01, -1.37933244e-01],
       [-1.65185600e+00, -3.12925511e+00, -1.34613017e+00,
        -8.32474541e-01, -3.96684293e+00, -5.86516774e-01,
        -1.41728443e+00,  4.34878849e-01, -7.36866982e-01,
        -9.66503736e-01, -1.05789179e+00, -4.12222640e-01,
        -2.08125338e+00, -1.66480192e+00,  7.93265063e-01,
        -1.10207977e+00, -2.05589815e+00, -1.16027899e+00,
        -1.61208803e+00, -1.09801269e+00, -2.30222303e-01,
        -5.11369286e-01,  6.51176809e-01, -6.65485660e-01,
        -2.00712514e+00, -6.55844541e-01, -1.01865593e-01,
        -1.51999850e+00,  8.09910403e-01,  2.50425071e+00,
        -2.62964505e+00,  8.04558201e-01, -2.37747434e+00,
         8.61330254e-01, -1.35308705e-01, -7.49288288e-01,
        -1.62749977e-01,  1.35135517e+00, -1.23846935e-01,
         1.24134031e+00, -3.59438926e+00, -1.18378351e+00,
        -1.17169117e+00, -2.55056689e+00, -4.30181165e-01,
        -4.53673651e-01, -4.15733223e-01, -2.38076613e+00,
         1.09526943e+00,  2.09220702e-01],
       [-1.99658145e+00, -1.77412524e+00, -4.02349770e-01,
        -1.35326242e+00,  7.30338976e-01, -1.06680132e+00,
        -5.01755164e-01,  4.20417199e-01, -9.84871027e-01,
        -5.82079203e-01, -7.48322989e-01, -2.16065002e+00,
        -4.17394937e-01, -9.59449782e-01, -1.30280333e+00,
        -1.31828918e+00, -1.40848976e+00,  6.19093536e-01,
         2.25511833e-01,  1.01023225e-01, -1.15520492e+00,
        -5.39491044e-02, -5.56841563e-01, -1.49142237e+00,
        -4.20400293e-01, -8.15746798e-01, -2.11231862e+00,
         2.35325525e-01, -2.06028713e+00, -3.09151091e+00,
        -1.37158652e+00, -7.95181184e-01,  1.00944689e+00,
        -7.92711311e-01,  2.87611545e-01, -5.67482389e-01,
        -7.70805816e-01, -1.33435108e+00,  1.37245135e-01,
         4.35459819e-01, -2.79093741e+00,  1.36669324e+00,
        -1.90185996e+00, -7.22975990e-01,  1.10628753e+00,
        -1.95586951e-01, -6.97562092e-01, -7.48709938e-01,
        -2.63713694e+00,  4.16611132e-01]])

    # FEE coefficient
    dict['Beta_FEE'] = np.array([[-39.83560079, -16.94117855, -23.76145154, -24.34083586,
        -41.75064079,  -9.4776606 , -31.60358186, -38.20034445,
        -21.58399663, -30.5944229 , -23.64176604, -55.89585902,
        -35.86307643, -31.44994363, -56.15081617, -25.07096393,
        -14.02148361, -31.45192574, -30.26871728, -64.66114708,
          1.3668559 , -56.45299941, -22.65173612, -40.75969621,
        -10.12573348, -16.58018338,  -0.50619224, -65.11792198,
        -23.18252514, -30.02883055, -40.17365083, -25.25853594,
        -25.95959852, -54.08000753, -12.5188757 , -23.81615323,
        -11.44854621, -44.14667676, -29.97295332, -16.9103805 ,
        -39.12075286, -11.69830663, -17.21122893, -40.12131114,
        -36.1251483 , -34.36989354, -32.29217951, -45.39078348,
        -16.81954759, -17.89822437],
       [-51.33668444, -28.93417448, -48.52435903, -35.49997114,
        -18.79490003, -41.41091211, -30.6882344 , -41.05833764,
        -33.2360945 , -53.84445497, -42.99795219, -29.98382757,
        -33.0306463 , -36.96317668, -21.10192282, -31.20121788,
        -33.33811721, -31.1275882 , -48.60725116, -40.07457369,
        -24.10028199, -21.15769313, -23.42514787, -56.08445731,
        -62.03377729, -23.62076222, -61.07644331, -29.79097317,
        -36.67478744, -18.98301554, -45.04319722, -42.79178665,
        -28.29798358, -32.96695564, -30.99282598, -24.36916338,
        -43.31882199, -32.67105715, -48.21759076, -28.56495259,
        -11.14112345, -27.12481005, -26.52522453, -31.04138758,
        -50.15635497, -22.99071647, -14.40019036, -40.69313899,
        -36.58360298, -18.20144444],
       [-29.21429311, -33.08988005, -35.47058866, -23.89971232,
        -24.08911354,  -9.95472119, -51.88735144, -30.46486271,
        -41.06400689, -37.21699374, -21.75205781, -46.26353999,
        -51.87243921,  -7.83219693, -29.43727702, -55.19288441,
        -11.89163774, -50.48272434, -42.88561076, -29.64279732,
        -35.98452318, -31.12744907,  -7.05877244, -15.85594347,
        -28.69501292, -49.50244368,  -6.54717263, -28.47349218,
        -43.21594056, -21.31200798, -23.94625708, -33.10136756,
        -48.66709623, -27.52203072, -29.72493018, -23.96721029,
        -25.46003121, -46.89946873, -25.53644979, -42.14872554,
        -25.68687429, -32.86727759, -53.43390282, -36.68718808,
        -45.67345491, -24.39412123, -22.65181826, -20.97916275,
        -25.41015698, -36.04369186],
       [-40.03660508, -52.287648  , -23.1921887 , -35.04227607,
        -71.59042439, -26.37407968, -39.35260549,  -5.12369135,
        -32.13504133, -37.21365635, -24.81687211, -62.5966589 ,
         -8.24052373, -17.64575818, -48.30224082,  -2.56316456,
        -20.7945125 , -39.51358881, -31.08444632, -28.71551948,
        -40.88509205, -51.42544509, -68.45941388, -25.16561837,
        -19.85917194, -22.73663011, -42.47801913, -43.1512083 ,
        -38.00904317, -31.60309304, -43.43519658, -20.63401229,
        -26.04131342, -14.07215232, -34.92186489, -22.85320213,
        -36.0741473 , -26.92099733, -40.77343982, -43.63197606,
        -14.47192498, -39.10532526, -39.72113524, -32.06106149,
        -40.15134377, -35.63695288, -39.63701636, -21.84820215,
        -24.6949567 , -54.40364827],
       [-37.18393771, -49.60575185, -32.08064059, -29.76779111,
        -47.68259678, -15.99971138, -51.50210642, -45.74839927,
        -40.30104515, -31.73285857, -24.27827165, -37.35413775,
        -35.21203283, -45.37099092, -24.31671309, -42.91603666,
        -48.04571025, -17.50954142, -35.14468411, -13.29407666,
        -43.58680829, -13.33633093, -41.24463569, -10.01276495,
        -42.74257039, -10.36982737, -32.37507372, -54.14090791,
        -22.85666571, -21.35294193, -28.02699329, -57.93424236,
        -12.54710603, -38.46204428, -26.08020384, -12.57371097,
        -20.67955807, -45.86414173, -24.51114822, -25.70494987,
        -38.8280387 , -36.53985693, -60.58962029, -36.74353099,
        -30.02208306, -12.11616185, -33.95366901, -38.07411293,
        -21.29306766, -52.301526  ],
       [-26.19352183, -40.2987704 , -22.72626072, -46.44007914,
        -24.97141838, -42.8169232 , -20.16438288, -42.05073669,
        -28.57474521, -28.00834215, -39.72466634, -33.73100992,
        -41.12991894, -41.20581411, -31.47243791, -32.58986741,
        -51.65293003, -46.90493133, -46.41197554, -43.69882682,
        -37.23844036, -16.98337937,  -8.3076413 , -63.22867343,
        -30.87778089, -66.67197569, -23.33858979, -38.56298914,
        -32.11568325, -23.16968726, -24.37330265, -53.41798101,
        -50.73822639, -38.10856015, -26.2780254 , -35.03391547,
        -15.38986015, -12.92180293, -18.69591246,  -0.20619074,
        -15.76476505, -29.50041057, -34.79168303, -39.78726247,
        -24.56496791, -24.12630688, -30.11722435, -24.73871966,
        -41.83891553, -53.01712617],
       [-44.64120999, -24.24407432, -30.48465561, -22.98025345,
        -25.18552365,   6.47400246, -49.00646798, -44.62510323,
        -26.66521138, -34.53302642, -22.83386456, -48.97772515,
        -32.52646932, -26.95541975,  -4.47683356, -48.20135305,
        -35.52293925, -13.44335667, -26.94936739, -30.33193664,
        -44.48194578, -33.34365942, -40.01566063, -25.42989885,
        -38.35346676, -42.34710547, -36.07148138, -16.39989448,
        -33.02502073, -31.2015145 , -24.07350129, -13.96996209,
        -19.52300021, -33.23937227, -33.97931579, -26.09628929,
        -53.52975093, -36.74129193, -42.25683574, -47.90311385,
        -26.26496904, -40.48081166, -22.85376613,  -2.71225485,
        -38.77761819, -15.9293457 , -33.4037235 , -42.81407559,
        -44.53138461, -43.33330145],
       [-64.19619599, -34.29267073, -37.63413479, -20.24632787,
        -20.45966352, -42.52196967,  12.27953107, -52.21019738,
        -52.44419879, -15.69655562, -22.85439971, -28.16066326,
        -38.05295961,  -8.53339857, -43.47563674, -55.31693221,
        -50.18418019, -28.96465133, -10.6943167 , -35.28599189,
        -38.20913134, -31.92389473, -26.64750136, -29.91580483,
        -35.17454877, -22.38816716, -22.3738534 , -35.68888418,
        -22.52468867, -33.99831683, -60.62972848, -32.25544238,
        -18.74384143, -20.66115576, -28.49135835, -43.32947851,
        -58.26437322, -12.66358646, -30.97559409, -22.31391731,
        -20.81669023, -37.40167233, -13.58425845, -12.36915532,
        -39.78188181, -38.52797534, -35.95206886, -26.45038376,
        -28.03055119, -29.86726893],
       [-45.3005698 , -21.25503591, -16.27499248, -30.9110434 ,
        -21.69552209, -31.74397575, -29.44509075, -15.24290996,
        -27.16105745, -47.98397508, -21.52511617, -20.68546629,
        -43.96296974, -40.66290461, -41.50305766, -44.12473528,
        -12.69220146, -24.89443967, -46.29598055, -20.38446348,
        -39.07435004,  -7.21084993, -33.51559063, -29.2958537 ,
        -19.94387457, -47.53604229, -56.75288019, -28.98684276,
        -38.93791336, -51.33467628, -26.21468348, -37.84726775,
        -35.71880198, -29.04114347, -18.48486938, -32.92099032,
        -37.60723528, -34.71145423, -40.18039281,  -4.73745553,
         -9.27856386,  -5.71586905, -24.03850676, -33.00862365,
        -26.5093641 , -35.56903289, -19.42573647, -42.63750155,
        -45.62673318, -32.1110443 ],
       [-34.29983452, -32.08428754, -49.64174436,  -0.35890674,
        -24.73910335, -37.60334598, -11.56237582, -50.62635873,
        -45.93605896, -26.54715774, -37.6867621 , -52.61771391,
        -12.62952885, -25.40655615, -28.00134726, -38.47136173,
        -47.48531019, -16.40459182, -45.92929586, -30.80276274,
        -25.93663457, -28.20165999, -19.00631339, -36.37991246,
        -25.04179083, -32.05024904, -32.25985773, -38.34537153,
        -39.47538089, -29.32747665, -40.95679181, -25.86880022,
        -51.24479094, -52.53103772, -40.00164506, -22.34895038,
        -25.92108583, -28.64494295, -31.76246267, -50.62536239,
        -15.39407696, -36.73229951, -42.49032492, -27.23314502,
        -29.169601  , -35.62707372, -38.52464496, -35.02258694,
        -29.75735332,  -2.47511274]])

    # Variables choice model
    dict['AT_FSP'] = 10
    dict['TD_FSP'] = 10
    dict['Origin'] = np.array([0, 1, 1, 0, 0, 1, 0, 0, 1, 0])
    dict['AT_PSP'] = 10
    dict['TD_PSP'] = 10
    dict['AT_PUP'] = 5
    dict['TD_PUP'] = 10
    dict['Age_veh'] = np.array([0, 0, 0, 1, 0, 0, 1, 0, 0, 0])
    dict['Low_inc'] = np.array([1, 1, 1, 1, 0, 1, 1, 1, 1, 0])
    dict['Res'] = np.array([1, 1, 1, 0, 1, 1, 0, 0, 1, 1])

    return dict

def preprocess(dict):
    ''' Precomputation on the data in order to create the corresponding
        cplex model.
    '''

    ########## Precomputation ##########
    # Priority list
    priority_list = np.empty([dict['I'] + 1, dict['N']])
    for i in range(dict['I'] + 1):
        min = 1
        max = dict['N']
        for n in range(dict['N']):
            if dict['choice_set'][i, n] == 1:
                priority_list[i, n] = min
                min += 1
            else:
                priority_list[i, n] = max
                min -= 1
    dict['priority_list'] = priority_list

    # Exogene utility
    exo_utility = np.empty([dict['I'] + 1, dict['N'], dict['R_coef']])
    for n in range(dict['N']):
        for i in range(dict['I'] + 1):
            for r in range(dict['R_coef']):
                if i == 0:
                    # Opt-Out
                    exo_utility[i, n, r] = (dict['Beta_AT'][n, r] * dict['AT_FSP'] +
                                           dict['Beta_TD'] * dict['TD_FSP'] +
                                           dict['Beta_Origin'] * dict['Origin'][n])
                elif i == 1:
                    # PSP
                    exo_utility[i, n, r] = (dict['ASC_PSP'] +
                                           dict['Beta_AT'][n, r] * dict['AT_PSP'] +
                                           dict['Beta_TD'] * dict['TD_PSP'])
                else:
                    # PUP
                    exo_utility[i, n, r] = (dict['ASC_PUP'] +
                                           dict['Beta_AT'][n, r] * dict['AT_PUP'] +
                                           dict['Beta_TD'] * dict['TD_PUP'] +
                                           dict['Beta_Age_Veh'] * dict['Age_veh'][n])
    dict['exo_utility'] = exo_utility

    # Beta coefficients for endogenous variables
    beta_FEE_PSP = np.empty([dict['N'], dict['R_coef']])
    beta_FEE_PUP = np.empty([dict['N'], dict['R_coef']])
    for n in range(dict['N']):
        for r in range(dict['R_coef']):
            beta_FEE_PSP[n, r] = (dict['Beta_FEE'][n, r] +
                                 dict['Beta_FEE_INC_PSP'] * dict['Low_inc'][n] +
                                 dict['Beta_FEE_RES_PSP'] * dict['Res'][n])
            beta_FEE_PUP[n, r] = (dict['Beta_FEE'][n, r] +
                                 dict['Beta_FEE_INC_PUP'] * dict['Low_inc'][n] +
                                 dict['Beta_FEE_RES_PUP'] * dict['Res'][n])
    dict['endo_coef'] = np.array([np.zeros([dict['N'], dict['R_coef']]), beta_FEE_PSP, beta_FEE_PUP])

    # Calculate bounds on the utility
    lb_U = np.empty([dict['I'] + 1, dict['N'], dict['R_coef']])
    ub_U = np.empty([dict['I'] + 1, dict['N'], dict['R_coef']])
    for n in range(dict['N']):
        for i in range(dict['I'] + 1):
            for r in range(dict['R_coef']):
                if dict['endo_coef'][i, n, r] > 0:
                    lb_U[i, n, r] = (dict['endo_coef'][i, n, r] * dict['lb_p'][i] +
                                    dict['exo_utility'][i, n, r])
                    ub_U[i, n, r] = (dict['endo_coef'][i, n, r] * dict['ub_p'][i] +
                                    dict['exo_utility'][i, n, r])
                else:
                    lb_U[i, n, r] = (dict['endo_coef'][i, n, r] * dict['ub_p'][i] +
                                    dict['exo_utility'][i, n, r])
                    ub_U[i, n, r] = (dict['endo_coef'][i, n, r] * dict['lb_p'][i] +
                                    dict['exo_utility'][i, n, r])

    dict['lb_U'] = lb_U
    dict['ub_U'] = ub_U


if __name__ == '__main__':
    dict = getData()
    preprocess(dict)

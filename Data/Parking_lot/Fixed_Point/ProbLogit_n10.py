# Data Stackelberg game with capacity, continuous price
import numpy as np

def getData():
    ''' Construct a dictionary containing all the data_file
        Returns:
            dict          dictionarry containing all the data
    '''
    # Initialize the output dictionary
    dict = {}

    # Number of alternatives in the choice set (without considering opt-out)
    dict['I'] = 2
    dict['I_opt_out'] = 1

    # Number of customers
    dict['N'] = 10

    # Number of draws
    dict['R'] = 50

    # Number of operators
    dict['K'] = 2

    dict['operator'] = np.array([0, 1, 2])

    # Lower and upper bound on prices
    dict['lb_p'] = np.array([0.00, 0.00, 0.00]) # lower bound (FSP, PSP, PUP)
    dict['ub_p'] = np.array([0.00, 1.00, 1.00]) # upper bound (FSP, PSP, PUP)

    dict['n_price_levels'] = 10

    #dict['capacity'] = np.array([60.0, 6.0, 6.0]) # Availability for each alternative (opt-out always available)

    #dict['fixed_cost'] = [0.0, 0.2, 0.2] # Initial cost for each alternative
    #dict['customer_cost'] = [0.0, 0.1, 0.3] # Additional cost for each new customer

    # Choice set of the customers
    #	 		           n1 n2 n3...
    dict['choice_set'] = np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], # Opt-out (FSP)
                                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], # PSP
                                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])  # PUP

    # Parameters choice model
    dict['ASC_PSP'] = 32
    dict['ASC_PUP'] = 34
    dict['Beta_TD'] = -0.612
    dict['Beta_Origin'] = -5.762
    dict['Beta_Age_Veh'] = 4.037
    dict['Beta_FEE_INC_PSP'] = -10.995
    dict['Beta_FEE_RES_PSP'] = -11.440
    dict['Beta_FEE_INC_PUP'] = -13.729
    dict['Beta_FEE_RES_PUP'] = -10.668

    # AT coefficient
    dict['Beta_AT'] = -0.788

    # FEE coefficient
    dict['Beta_FEE'] = -32.328

    # Random term (Gumbel distribution (0,1)) - 3 alternatives x 10 customers x 50 draws
    dict['xi'] = np.array([[[  3.00777300e-01,  -1.11404900e+00,  -2.72564000e-02,
          -8.46871000e-01,   3.47582600e-01,  -4.22376600e-01,
          -7.22018000e-01,   1.48181400e-01,  -5.39255000e-02,
           7.58866900e-01,  -1.07926230e+00,  -1.18193700e+00,
          -1.17551500e+00,  -2.05004660e+00,  -1.45473300e-01,
          -5.52281500e-01,  -1.34856760e+00,  -2.32702240e+00,
          -7.47981300e-01,   9.46382900e-01,  -3.63967810e+00,
          -8.40901800e-01,  -4.13138800e-01,  -1.35165570e+00,
          -2.96777770e+00,  -9.31377600e-01,   1.23366320e+00,
           6.01065800e-01,  -4.05693800e-01,   1.06373310e+00,
           5.81783100e-01,  -4.22376600e-01,  -3.88671200e-01,
          -5.85119900e-01,  -2.54762740e+00,  -6.79779200e-01,
           1.30803440e+00,  -1.37512600e-01,  -2.40340940e+00,
          -5.62913500e-01,  -1.20676020e+00,  -1.96066700e-01,
           3.12711000e-02,   4.44850400e-01,   4.91462900e-01,
           3.50650300e-01,  -2.22350000e-02,   8.91549900e-01,
          -1.59373080e+00,   3.15500300e-01],
        [ -5.54569500e-01,   6.46320900e-01,   7.41887000e-02,
          -9.75405000e-01,  -7.57942500e-01,  -1.29020310e+00,
           5.72785000e-02,   2.24281600e-01,  -1.28237270e+00,
          -3.51545300e-01,   2.13101900e-01,  -2.17614820e+00,
          -1.78637100e-01,   1.67338700e-01,  -8.60508000e-02,
          -1.04495920e+00,  -7.50947600e-01,   6.89610300e-01,
           4.81380500e-01,  -3.95621800e-01,   8.16803900e-01,
          -1.18792280e+00,   6.40921400e-01,   2.60808900e-01,
          -2.30427340e+00,  -2.71477750e+00,   7.98925500e-01,
           6.56647100e-01,  -1.16359920e+00,   9.58140200e-01,
          -1.13559660e+00,   2.46951600e-01,  -1.94760910e+00,
           2.01904000e-02,  -1.72571720e+00,   1.29544510e+00,
          -6.22916000e-02,  -2.19196160e+00,  -5.15981000e-01,
          -7.29247000e-02,   7.30818000e-01,   1.97204200e-01,
           6.34473800e-01,  -2.32416010e+00,  -2.53010350e+00,
           3.52847400e-01,   7.61650700e-01,  -3.38542900e-01,
          -2.87288980e+00,  -1.76667440e+00],
        [ -2.58283720e+00,  -1.47009010e+00,  -6.94431000e-02,
           4.79009500e-01,  -4.28775210e+00,  -3.46423680e+00,
           1.32507280e+00,  -3.70160560e+00,  -6.77188200e-01,
          -1.28580910e+00,  -1.94163510e+00,   4.17061200e-01,
           1.06918000e-01,  -5.87997200e-01,  -7.27799800e-01,
           3.01345600e-01,   4.92425000e-02,  -1.52175030e+00,
          -8.50216400e-01,  -1.61152460e+00,  -6.00636400e-01,
          -2.99814200e-01,  -9.84352000e-02,   6.65196800e-01,
           1.05527130e+00,   3.81721600e-01,  -1.98898370e+00,
          -2.41950300e+00,  -2.84293200e-01,  -3.32434600e-01,
          -3.38712150e+00,   1.46171500e-01,   3.82450900e-01,
           6.11567700e-01,  -5.69031300e-01,  -2.17953890e+00,
           7.28711100e-01,  -4.22519000e-01,   1.57261000e-02,
           4.14096500e-01,   9.76785800e-01,  -5.73883600e-01,
           1.39881300e-01,   8.53410800e-01,  -2.92638890e+00,
           3.06597000e-01,   9.28310100e-01,   4.70764400e-01,
           8.01247000e-01,   2.59450100e-01],
        [ -8.14718200e-01,   1.08552130e+00,  -4.58656700e-01,
          -1.17812310e+00,  -9.50010000e-03,  -8.79657300e-01,
          -5.48114100e-01,  -5.49698400e-01,  -3.37831180e+00,
          -3.41109300e-01,  -1.66278690e+00,   5.50204900e-01,
          -2.21412840e+00,   1.08868540e+00,  -5.61856800e-01,
          -5.32174400e-01,   1.14628560e+00,  -1.01320700e+00,
          -2.53521960e+00,  -7.63757100e-01,   7.88646300e-01,
          -4.71299400e-01,   1.41286400e-01,  -1.48664830e+00,
          -6.47511500e-01,   5.06786700e-01,   3.99707600e-01,
          -2.78944600e-01,   2.78847400e-01,   1.91051270e+00,
          -6.47628200e-01,   2.97667600e-01,  -1.33201580e+00,
           7.86414200e-01,  -2.99814200e-01,   1.37338570e+00,
          -2.62614040e+00,  -1.75768180e+00,  -2.29326350e+00,
          -6.69304400e-01,  -3.02049700e-01,  -7.57453700e-01,
          -2.64618470e+00,  -7.89128600e-01,   1.23366320e+00,
          -1.25101240e+00,   2.99367300e-01,  -1.01538270e+00,
          -3.47854300e-01,   1.48596630e+00],
        [ -3.14421100e-01,   1.48970390e+00,   7.58866900e-01,
          -1.28134600e-01,  -1.57011520e+00,  -3.16038400e-01,
          -5.65070800e-01,   6.89610300e-01,   4.49312000e-02,
           1.64113810e+00,   1.27941090e+00,   1.41627490e+00,
           1.15315290e+00,  -4.17570800e-01,  -1.21702880e+00,
           6.12679800e-01,  -5.76067900e-01,  -1.35672740e+00,
          -1.23196340e+00,  -4.99783200e-01,  -1.41193030e+00,
          -1.65479230e+00,  -3.88462700e-01,  -7.74739900e-01,
          -1.20079170e+00,   6.97802700e-01,   8.99620400e-01,
          -1.69724430e+00,  -1.86835000e-01,  -9.30235200e-01,
           4.95354900e-01,  -1.73421620e+00,   6.02600700e-01,
          -3.49824120e+00,  -2.23184900e-01,   2.70612400e-01,
          -1.46028420e+00,  -8.16988900e-01,  -4.50009600e-01,
          -7.25908800e-01,  -3.51765200e-01,  -9.41124500e-01,
          -6.73836500e-01,  -1.90191460e+00,  -3.48827100e-01,
           2.50192200e-01,  -1.75768180e+00,   6.56215000e-02,
          -3.82250060e+00,  -1.51110000e-02],
        [ -4.20870420e+00,   6.97654800e-01,   4.63233900e-01,
           1.01878240e+00,   4.71580100e-01,  -8.12500700e-01,
           6.90350000e-02,   4.22331100e-01,  -8.70325000e-01,
          -1.04692690e+00,   3.49999800e-01,  -1.29750740e+00,
          -1.07421180e+00,   1.03902880e+00,  -1.34165970e+00,
          -2.26136100e-01,  -1.34304400e-01,  -8.18138500e-01,
          -1.21283980e+00,  -2.81768610e+00,  -5.38649300e-01,
          -1.15173350e+00,  -2.71859780e+00,  -2.16258100e+00,
          -9.61909400e-01,  -1.81965670e+00,  -6.42727700e-01,
           4.18239400e-01,  -5.15301100e-01,  -3.52466600e-01,
          -1.22964300e+00,  -5.86973900e-01,  -2.49629280e+00,
           1.06723980e+00,  -3.62064200e-01,  -2.35366550e+00,
           3.08600000e-01,  -2.09726590e+00,  -1.59205810e+00,
           1.03008390e+00,  -2.34395900e-01,  -7.37031600e-01,
           5.55584000e-02,  -1.80776500e-01,  -8.40612500e-01,
          -1.03796570e+00,  -8.52107000e-01,  -1.07047120e+00,
           1.57261000e-02,  -2.19827200e+00],
        [ -1.17778900e-01,   4.52858500e-01,   9.68623600e-01,
          -1.17890600e+00,  -3.13036940e+00,   4.40069000e-02,
          -4.99681610e+00,   1.32097500e-01,   2.29937000e-01,
          -4.36819790e+00,  -2.81510000e-02,  -2.52355500e-01,
          -1.51259320e+00,  -5.12858700e-01,   7.35137900e-01,
          -1.99230590e+00,   1.00183000e+00,   5.69783700e-01,
           1.47486560e+00,   7.13296600e-01,   3.02938100e-01,
           6.33004600e-01,  -4.51692700e-01,  -1.62874560e+00,
           3.44410500e-01,  -1.24714400e-01,  -2.14612320e+00,
          -5.12790000e-02,  -1.99760080e+00,   5.76780100e-01,
          -4.87298000e-02,  -3.08872550e+00,  -8.89978100e-01,
          -4.41026400e-01,  -8.67696900e-01,  -6.65366600e-01,
          -2.41412530e+00,  -1.96626940e+00,  -1.94369100e-01,
          -1.59876090e+00,   1.07957270e+00,  -2.67405100e-01,
           8.04541800e-01,   1.42355810e+00,   4.64494100e-01,
          -4.25392900e-01,   4.27922800e-01,  -3.56614600e-01,
          -1.92931320e+00,  -1.10658690e+00],
        [ -2.58046830e+00,   5.67263400e-01,  -8.20637000e-01,
          -2.28565400e-01,  -6.77000600e-01,  -1.16410820e+00,
           2.34304000e-01,  -8.82502300e-01,   4.71580100e-01,
           1.08747280e+00,  -1.94760910e+00,   3.31515700e-01,
          -1.84930020e+00,  -1.56992790e+00,  -1.86966780e+00,
           1.91742700e-01,  -5.26630800e-01,  -9.77693900e-01,
          -1.67246000e-01,   5.76716500e-01,   7.76993200e-01,
          -1.60962500e-01,   4.32393900e-01,  -5.33859300e-01,
          -2.47336600e-01,   1.30059900e-01,   1.32507280e+00,
          -2.68091110e+00,  -5.93558100e-01,   7.60812000e-02,
           6.62473000e-01,  -9.99182100e-01,  -5.46324700e-01,
          -1.18344820e+00,  -2.96684620e+00,   1.69242100e-01,
          -1.46736440e+00,   6.77502100e-01,   5.55584000e-02,
          -3.23368400e-01,   1.28037330e+00,   1.30792800e-01,
           1.05328760e+00,  -2.32535670e+00,   4.85900300e-01,
           3.37676800e-01,  -9.91939400e-01,   7.76993200e-01,
          -8.31340000e-01,  -1.99307300e-01],
        [ -2.71859780e+00,  -4.58285300e-01,  -3.46121000e-01,
          -1.69549800e+00,  -2.31780200e-01,  -1.79522140e+00,
          -6.53807500e-01,  -3.98803000e-01,  -9.44847100e-01,
          -2.31571440e+00,  -6.69843200e-01,  -2.71477750e+00,
          -5.78479000e-02,  -4.66120700e-01,   5.72646000e-02,
          -9.25632400e-01,  -9.70596000e-01,   2.36888000e-02,
          -7.35642000e-02,   6.45600600e-01,   9.91710600e-01,
          -8.66493400e-01,  -5.77948200e-01,  -2.14427500e-01,
          -5.49748200e-01,  -7.45653700e-01,   5.46405200e-01,
          -1.35984500e+00,  -2.40701760e+00,   8.94875100e-01,
           1.53264620e+00,  -8.11502800e-01,  -4.87802300e-01,
          -5.18078000e-02,  -1.69696300e-01,  -3.25695900e+00,
          -1.97580970e+00,  -4.71545800e-01,   1.59509780e+00,
          -2.94408210e+00,  -9.58624500e-01,  -1.18115000e-01,
          -3.80914700e+00,   3.74238200e-01,   4.07289200e-01,
           6.46795500e-01,  -2.68802390e+00,  -2.49095000e-02,
           9.61240100e-01,  -3.08698000e-01],
        [  4.70200900e-01,  -3.55770230e+00,  -2.34323060e+00,
          -3.49824120e+00,  -2.40701760e+00,  -1.87021900e-01,
          -1.00300800e+00,  -1.97688890e+00,  -2.74753300e-01,
           3.39655400e-01,  -2.23612140e+00,  -1.30466830e+00,
          -2.23731580e+00,  -1.48545930e+00,  -3.43605000e-02,
           1.04569800e-01,  -8.10604100e-01,  -7.57453700e-01,
          -6.15482600e-01,   1.64296300e-01,  -2.30349360e+00,
          -1.11749290e+00,   9.22065300e-01,  -1.61074780e+00,
          -8.78502600e-01,  -5.85119900e-01,  -4.46360200e-01,
          -1.27553000e-02,   6.30773900e-01,   1.56455250e+00,
          -4.22519000e-01,   7.84273800e-01,  -5.09104900e-01,
          -2.64206660e+00,   1.12190480e+00,  -3.01200600e-01,
          -8.66493400e-01,  -1.02524530e+00,   9.80630100e-01,
           1.88272400e-01,  -3.51764100e+00,  -1.89762630e+00,
          -1.00785750e+00,  -1.41947520e+00,   2.09187500e-01,
          -6.72293200e-01,  -4.96574380e+00,   1.22219300e-01,
           3.99451000e-01,   1.42328500e-01]],

       [[  3.46388300e-01,  -2.10218530e+00,   3.61883000e-02,
           9.90311900e-01,  -5.39143900e-01,  -2.69089100e-01,
           6.65196800e-01,   3.99112200e-01,  -2.08041000e-01,
          -7.61066900e-01,  -3.13031220e+00,  -5.63238890e+00,
          -8.55266900e-01,  -1.89627120e+00,  -1.85814980e+00,
           7.81006000e-01,   5.72618000e-01,  -6.10121800e-01,
           2.60721400e-01,   6.12348500e-01,  -9.79623200e-01,
          -3.14313660e+00,   1.10967790e+00,  -2.36095370e+00,
          -5.30390910e+00,  -1.15539470e+00,  -3.40960000e-03,
          -4.36175940e+00,   1.32703510e+00,  -4.37662800e-01,
           1.83318700e-01,  -6.79779200e-01,   7.45659900e-01,
          -2.11169800e-01,   3.31874500e-01,   1.74709600e-01,
           1.00840540e+00,  -2.55194400e-01,   4.49312000e-02,
          -3.98929960e+00,  -2.86737500e-01,   8.05352000e-02,
          -2.57046000e-01,  -1.22114300e-01,   7.14006000e-02,
          -2.29779800e-01,  -2.69363880e+00,  -4.28995700e-01,
           2.19509200e-01,  -2.45611950e+00],
        [  7.37340700e-01,  -3.23244200e-01,   2.22956100e-01,
          -1.30112500e+00,  -2.57375070e+00,   5.62659000e-02,
          -2.96084530e+00,   1.37294500e+00,  -2.62271150e+00,
          -4.08293730e+00,   9.51209000e-02,  -2.28799950e+00,
          -4.96342200e-01,  -5.26630800e-01,  -3.64263700e-01,
          -1.99417330e+00,  -9.33376100e-01,  -2.96812100e-01,
          -5.78211000e-01,  -3.54247640e+00,   7.33177100e-01,
          -5.15702600e-01,  -3.14541320e+00,  -5.82752000e-02,
          -7.21654000e-02,  -4.59401400e-01,  -9.20104400e-01,
          -1.88350630e+00,   8.72912000e-01,  -3.29647150e+00,
          -1.81216030e+00,  -1.52900360e+00,  -1.51017710e+00,
          -9.22687100e-01,   7.39791900e-01,   4.49312000e-02,
           5.69848400e-01,  -8.10604100e-01,   6.51445000e-01,
          -5.69794000e-01,  -9.42723900e-01,  -6.16804400e+00,
          -1.11404900e+00,  -2.30349360e+00,  -2.17527750e+00,
          -6.81314600e-01,  -2.30442190e+00,  -1.88360000e-01,
           1.54222750e+00,  -2.14427500e-01],
        [ -1.22809300e+00,  -1.62064560e+00,  -3.29292020e+00,
          -6.69255100e-01,   1.07652630e+00,   4.31613700e-01,
          -3.79429360e+00,  -1.93860800e-01,  -4.25392900e-01,
          -2.74812160e+00,  -2.27822100e-01,  -2.01892730e+00,
          -4.77257600e-01,   4.00029300e-01,   1.02265130e+00,
          -1.16862240e+00,  -1.41719270e+00,  -1.03057300e-01,
          -6.46895500e-01,  -1.71147090e+00,  -3.18220740e+00,
          -3.10389520e+00,   2.28233400e-01,  -1.77543470e+00,
          -5.73123400e-01,  -5.45301230e+00,  -2.39946210e+00,
           1.65143750e+00,  -1.46691480e+00,   4.06395400e-01,
           1.24415970e+00,  -9.37662100e-01,   1.43310410e+00,
          -1.61611190e+00,  -5.65641000e-02,  -2.97767460e+00,
          -1.18792280e+00,   3.74238200e-01,   1.43399360e+00,
          -8.09081600e-01,  -2.47751900e-01,  -9.91780600e-01,
          -2.49629280e+00,   1.05328760e+00,  -2.41179440e+00,
           5.83974400e-01,  -5.99360600e-01,   7.13296600e-01,
          -1.19504850e+00,   4.97720200e-01],
        [  1.10319360e+00,   2.29261800e-01,   1.50555280e+00,
          -2.20886960e+00,  -3.44303100e-01,  -1.09497500e-01,
          -1.17507400e-01,   8.96822900e-01,  -4.28995700e-01,
          -1.49590870e+00,  -6.66802300e-01,  -1.19504850e+00,
          -1.13559660e+00,   3.81721600e-01,  -4.79832800e-01,
          -1.50865300e-01,  -1.03633180e+00,  -8.82521300e-01,
          -2.35136110e+00,  -2.39654940e+00,  -7.71322900e-01,
           2.94492500e-01,  -7.89893000e-02,  -2.75148770e+00,
          -9.70596000e-01,  -1.38455210e+00,   5.72634700e-01,
          -4.76594190e+00,  -8.04342800e-01,  -1.69696300e-01,
          -3.11329200e-01,  -2.80694990e+00,  -4.07557200e-01,
           1.91051270e+00,  -1.54324690e+00,  -1.07066570e+00,
          -7.37147900e-01,  -1.86434340e+00,  -6.04725300e-01,
           7.10529900e-01,  -2.06603800e-01,   2.05390600e-01,
          -1.12157270e+00,   2.22433100e-01,   3.13950000e-01,
          -4.32966700e-01,  -5.68384100e-01,  -2.55183370e+00,
          -5.50517300e-01,  -1.75141240e+00],
        [ -6.70447900e-01,  -4.62123080e+00,  -7.06697300e-01,
           3.64558600e-01,   1.11528130e+00,  -4.46360200e-01,
          -1.68435000e-02,  -1.09141930e+00,  -1.79080540e+00,
          -7.27617000e-02,   1.49728370e+00,  -1.87866380e+00,
          -6.61659400e-01,  -4.65719900e-01,  -1.47009010e+00,
          -8.92910500e-01,  -8.14718200e-01,   1.35477840e+00,
          -1.49520760e+00,   5.07685200e-01,  -2.81923500e-01,
          -1.64621980e+00,  -4.30757900e-01,  -1.49520760e+00,
           1.14225170e+00,  -5.31728200e-01,  -3.30859730e+00,
          -1.61043910e+00,   7.87100900e-01,  -7.53955800e-01,
          -1.02973940e+00,  -1.58717600e-01,   6.44277500e-01,
           3.94451300e-01,  -1.21512000e-02,  -1.89155100e+00,
          -1.22114300e-01,   8.51563700e-01,   8.72369900e-01,
           1.20811900e-01,  -1.94369100e-01,   5.64970800e-01,
           1.01318270e+00,  -4.02621700e-01,   1.12774600e-01,
           7.86463700e-01,  -6.83327900e-01,   6.65196800e-01,
           2.28221100e-01,   4.83277300e-01],
        [  9.65195000e-01,   1.27312900e-01,   2.46951600e-01,
           7.54943300e-01,  -1.21512000e-02,  -7.29247000e-02,
          -7.57409000e-02,  -7.89736000e-02,  -7.02813000e-02,
          -2.05004660e+00,  -8.15585400e-01,  -1.54092350e+00,
          -5.79679700e-01,   8.31344000e-02,   8.98438400e-01,
          -1.24402710e+00,  -3.76087600e-01,   1.03008390e+00,
          -5.39143900e-01,  -4.46241400e-01,  -8.30170300e-01,
          -5.50517300e-01,  -9.16631000e-02,  -5.90851200e-01,
          -5.93558100e-01,  -1.29020310e+00,   1.30170820e+00,
           1.35710880e+00,  -2.71850500e-01,  -7.26908200e-01,
           3.52032600e-01,  -1.20106200e+00,   6.12679800e-01,
          -2.44885300e+00,  -2.31245130e+00,   1.03198810e+00,
          -1.16475830e+00,   4.62824500e-01,   1.29598770e+00,
          -2.44847930e+00,   1.15084720e+00,  -7.13633700e-01,
          -1.99230590e+00,   1.29122410e+00,  -5.07219800e-01,
           3.08506000e-01,  -1.17890600e+00,  -7.57409000e-02,
          -1.04692690e+00,  -7.61006200e-01],
        [  4.78696200e-01,  -1.19993000e-01,  -1.34757150e+00,
          -4.51231700e-01,  -2.90141600e+00,   1.51450490e+00,
          -2.06000150e+00,   7.98612800e-01,  -5.99360600e-01,
           1.05055660e+00,  -6.70587000e-02,  -3.04889800e-01,
          -1.41589060e+00,  -1.75561010e+00,  -2.56942100e-01,
          -1.17095230e+00,  -2.26161670e+00,   4.73345500e-01,
           1.46303100e-01,  -2.92190670e+00,  -1.98280790e+00,
          -1.64462450e+00,  -1.78003450e+00,  -6.11644500e-01,
          -2.08494190e+00,   1.10327020e+00,   3.15388000e-02,
           1.47155600e-01,  -2.80302200e-01,  -2.49751500e-01,
          -6.28288000e-01,  -2.65227900e-01,  -4.44279900e-01,
          -3.54338200e-01,  -2.66324810e+00,  -1.26844280e+00,
          -1.27402390e+00,   1.51364540e+00,   1.04094120e+00,
           2.02104200e-01,  -2.50167500e+00,  -2.96812100e-01,
          -7.06697300e-01,   1.02882480e+00,  -6.35385000e-02,
           4.97103600e-01,   8.12238000e-01,   1.93595900e-01,
           6.91876400e-01,  -4.02770000e-02],
        [  4.91052200e-01,  -6.72166100e-01,  -2.00270300e-01,
          -6.51304900e-01,   2.19428900e-01,   1.52717600e-01,
          -2.18087000e-01,   3.95623800e-01,  -1.86337920e+00,
          -5.68405800e-01,  -3.77525600e-01,   1.32604520e+00,
           6.72005400e-01,   9.70896800e-01,  -2.19827200e+00,
           3.53589300e-01,  -9.67120000e-03,  -2.63840470e+00,
           2.25160000e-02,  -2.60453300e-01,  -2.79634000e-01,
          -8.58154700e-01,   2.62671000e-02,   1.02634130e+00,
           7.13296600e-01,  -1.06894790e+00,   1.97295500e-01,
          -1.16813330e+00,  -1.69784160e+00,  -1.06880600e+00,
          -3.00909000e-02,   4.64494100e-01,   1.14234300e-01,
          -8.55266900e-01,   4.27922800e-01,   5.28746700e-01,
          -2.12504600e-01,  -6.30900200e-01,   1.22937530e+00,
          -1.59398200e-01,  -8.40612500e-01,  -1.45976080e+00,
          -5.78508900e-01,   1.42987230e+00,  -1.81059800e-01,
          -2.64965540e+00,   5.45533600e-01,   1.20892100e-01,
          -5.79679700e-01,  -1.69377740e+00],
        [  9.29287300e-01,  -1.31197550e+00,  -6.47982800e-01,
          -2.25759900e-01,  -1.32687950e+00,   8.45917300e-01,
          -1.41646900e-01,  -5.64308600e-01,  -1.35983500e-01,
          -5.15310250e+00,  -1.99336420e+00,  -1.40212600e+00,
          -4.64735450e+00,   6.44290200e-01,  -4.65719900e-01,
          -2.26161670e+00,  -2.07692370e+00,  -1.05032900e-01,
          -2.03755770e+00,  -4.11547200e-01,  -1.27144810e+00,
          -5.16683300e-01,  -7.85195600e-01,  -3.21986320e+00,
          -3.69969480e+00,   4.36499000e-02,  -1.35097400e-01,
           4.44850400e-01,   6.33453600e-01,  -2.15547360e+00,
           1.17630260e+00,  -9.80372300e-01,  -1.82415800e-01,
           8.11731200e-01,   4.00741000e-02,  -2.06031500e-01,
           5.61495500e-01,   7.64780000e-03,  -7.64929100e-01,
          -1.51017710e+00,  -4.45179800e-01,  -1.15447700e+00,
           9.08193000e-02,  -2.88276700e-01,  -2.11913260e+00,
           5.42614100e-01,  -2.86737500e-01,  -2.53942550e+00,
          -1.61074780e+00,   1.21830000e-02],
        [  9.20155000e-02,   4.05237600e-01,  -9.39731800e-01,
          -1.37668560e+00,  -3.00471970e+00,  -8.64072600e-01,
          -2.17953890e+00,  -3.26463600e-01,  -1.31305900e+00,
           1.31581450e+00,  -1.68135460e+00,  -5.65578900e-01,
          -1.52739510e+00,   2.71065900e-01,  -4.45779600e-01,
          -3.36663000e-01,   9.43598100e-01,  -9.30235200e-01,
          -1.07570210e+00,   3.65215400e-01,   5.43715400e-01,
           1.25043210e+00,  -2.26161670e+00,  -7.95540900e-01,
           1.63820900e-01,  -1.50520010e+00,   1.08187150e+00,
          -3.04889800e-01,  -7.70469500e-01,   5.88844700e-01,
          -9.12028300e-01,  -2.23184900e-01,  -5.46804700e-01,
          -1.30981210e+00,  -1.57290100e-01,  -5.32174400e-01,
          -4.92193400e-01,   3.37505000e-01,  -8.24998800e-01,
           1.07068800e+00,   6.26718000e-01,  -7.66455600e-01,
          -1.33107360e+00,   4.83439800e-01,  -7.12508000e-01,
          -1.60301930e+00,  -4.53323590e+00,  -2.43178770e+00,
          -1.86966780e+00,  -1.03857700e-01]],

       [[ -2.54762740e+00,  -2.41395000e-01,   6.39197600e-01,
           6.56647100e-01,  -4.51951000e-02,   3.19561100e-01,
          -4.39967760e+00,   5.17862300e-01,  -9.69205400e-01,
          -1.25460400e-01,  -2.30657000e-02,   5.01587300e-01,
          -1.68806530e+00,   6.62270900e-01,   1.11358540e+00,
           1.24705630e+00,   1.47155600e-01,   1.25606000e-01,
           5.32529500e-01,  -8.12500700e-01,  -2.78546340e+00,
           1.81543020e+00,  -3.82250060e+00,  -2.53835090e+00,
           1.64113810e+00,  -6.22731400e-01,  -3.02706700e-01,
          -4.50354110e+00,  -6.15482600e-01,  -7.18919300e-01,
          -2.75180000e-03,  -1.14366360e+00,  -2.99540400e-01,
          -4.32966700e-01,  -5.51661000e-01,  -1.22217550e+00,
           1.62389720e+00,  -3.60170600e-01,  -1.27214960e+00,
          -1.83435750e+00,  -8.50595700e-01,  -1.43895930e+00,
          -1.09135540e+00,   3.31515700e-01,  -7.44343400e-01,
           6.72005400e-01,   6.62190000e-01,   4.06605400e-01,
          -4.58285300e-01,   7.15120100e-01],
        [  2.76975900e-01,  -8.41847200e-01,   1.85725700e-01,
          -1.09398900e-01,  -1.18547220e+00,   5.71694700e-01,
          -6.70447900e-01,  -5.15981000e-01,  -7.33809000e+00,
          -1.07066570e+00,  -2.16654410e+00,   1.22267300e-01,
          -4.44932300e-01,  -2.23184900e-01,   3.99100000e-01,
           3.39655400e-01,  -8.28476600e-01,  -1.03796570e+00,
           2.71057900e-01,   1.09490440e+00,  -8.24998800e-01,
          -2.59179500e-01,  -1.03796570e+00,   7.30818000e-01,
          -8.53639000e-02,   1.06797640e+00,  -2.37379350e+00,
          -2.91920990e+00,  -2.36050740e+00,   1.96882250e+00,
          -2.71859780e+00,   3.12711000e-02,   1.12130900e-01,
          -2.63151200e-01,  -3.50140600e-01,  -3.33611000e-01,
          -7.63757100e-01,  -4.75171900e-01,  -1.30801090e+00,
          -1.77784400e+00,   5.81783100e-01,   2.97667600e-01,
           7.18312400e-01,  -1.10780700e+00,   9.16240300e-01,
          -1.10728020e+00,   9.89017000e-02,  -2.65386300e+00,
           3.99112200e-01,  -3.55584400e-01],
        [ -5.32274610e+00,   1.24709860e+00,   1.02896900e+00,
          -1.83594160e+00,   1.04442970e+00,  -9.75858000e-01,
           9.67380700e-01,  -2.32038160e+00,  -6.14918100e-01,
          -2.48315400e+00,   1.22937530e+00,  -1.61401060e+00,
           2.19607900e-01,  -1.98796150e+00,  -1.55862900e-01,
          -5.82752000e-02,  -6.37483700e-01,  -2.11913260e+00,
           3.49967800e-01,   7.27090600e-01,  -4.02621700e-01,
          -7.22309800e-01,  -1.39531320e+00,  -1.09141930e+00,
          -7.96259000e-02,   6.05474100e-01,   1.20523450e+00,
           9.36758100e-01,  -1.47009010e+00,   1.10269450e+00,
           6.20459700e-01,  -3.83494500e-01,  -3.23608870e+00,
          -1.14730710e+00,   8.68395800e-01,  -1.30711910e+00,
          -2.92288990e+00,  -1.56359580e+00,  -6.94066700e-01,
           5.05572700e-01,  -1.29480940e+00,  -1.30912100e-01,
          -2.43101790e+00,   1.32171200e-01,  -1.21512000e-02,
          -5.80931000e-02,  -3.63119700e-01,   8.68395800e-01,
          -1.72873970e+00,   6.78574200e-01],
        [ -9.23248400e-01,  -1.49590870e+00,   5.69496000e-02,
           6.37400100e-01,  -2.25921010e+00,   2.79520800e-01,
           2.05390600e-01,  -3.98803000e-01,  -1.64773140e+00,
           1.14998770e+00,  -4.42968100e-01,   6.73733500e-01,
          -4.17570800e-01,   1.94545000e-01,  -4.56892300e-01,
          -7.19128700e-01,  -3.97330600e-01,  -9.62711400e-01,
           7.62067600e-01,  -6.99950000e-03,   5.28746700e-01,
          -9.44409000e-01,  -1.85814980e+00,  -1.68245120e+00,
           2.19656200e-01,  -5.82003500e-01,  -2.79377090e+00,
          -1.30112500e+00,  -1.86826110e+00,  -8.37300300e-01,
          -1.90191460e+00,  -1.81059800e-01,  -1.57986570e+00,
          -6.40094000e-01,   4.76963100e-01,  -1.18661210e+00,
           2.68110200e-01,  -7.63757100e-01,  -3.51765200e-01,
          -1.53896600e-01,   3.14348000e-02,  -8.95753600e-01,
          -6.66922900e-01,  -3.85126340e+00,   8.67757000e-01,
           1.37417300e-01,   3.94451300e-01,  -1.54623880e+00,
          -9.66347200e-01,  -5.51832800e-01],
        [ -2.16917590e+00,  -5.25231300e-01,   7.73897300e-01,
          -9.70596000e-01,   6.23189700e-01,  -7.50947600e-01,
          -3.90765600e-01,  -4.67554940e+00,  -3.05525750e+00,
           8.35335800e-01,  -8.41847200e-01,  -5.39255000e-02,
          -1.04906660e+00,  -1.53054300e-01,  -1.88480680e+00,
          -9.74117300e-01,  -2.20669320e+00,  -1.54787490e+00,
          -5.48273800e-01,   8.13483200e-01,  -6.71789100e-01,
          -9.78777200e-01,  -5.99360600e-01,   4.01970000e-01,
          -9.13951000e-02,  -7.50374000e-01,   9.92450800e-01,
           8.53454600e-01,   7.07207300e-01,  -4.58285300e-01,
          -6.80413000e-02,  -1.49508190e+00,  -1.41325790e+00,
           8.05352000e-02,  -9.81202300e-01,   2.46951600e-01,
           4.33674000e-01,  -1.83764660e+00,  -1.37330900e-01,
          -1.07421180e+00,  -1.62285040e+00,  -3.10389520e+00,
           3.16400500e-01,  -1.94597090e+00,  -1.14586880e+00,
           1.66771980e+00,   1.01425420e+00,  -1.28580910e+00,
           8.99117500e-01,  -3.40960000e-03],
        [  7.98612800e-01,  -4.14314400e-01,  -2.23759500e-01,
          -1.16359920e+00,   7.27090600e-01,  -8.41847200e-01,
          -2.84536100e-01,  -5.78479000e-02,  -3.60865300e-01,
           9.29287300e-01,  -6.69983000e-01,  -4.77052480e+00,
           6.22819300e-01,   5.36473300e-01,  -2.71850500e-01,
          -9.13175000e-02,  -7.41189600e-01,  -5.32834700e-01,
           3.19561100e-01,  -2.60387500e-01,  -1.03857700e-01,
           1.27312900e-01,  -1.80279630e+00,   1.01831860e+00,
          -1.28134600e-01,  -1.66309390e+00,  -1.76203710e+00,
           3.03876500e-01,   1.82810500e-01,  -1.01881170e+00,
          -1.85851830e+00,   5.10252400e-01,  -2.99814200e-01,
          -6.24711000e-01,   3.85084600e-01,  -1.02472550e+00,
           1.08868540e+00,  -1.04633130e+00,   4.41511100e-01,
           5.62659000e-02,   5.78671000e-01,   3.84839600e-01,
          -2.36914200e-01,   5.04776500e-01,  -1.21967650e+00,
           1.39840200e-01,  -3.08259400e-01,   1.25113630e+00,
          -3.18220740e+00,  -1.16410820e+00],
        [  6.08393200e-01,  -8.46871000e-01,  -2.30548820e+00,
          -6.58322100e-01,  -2.39652820e+00,  -3.90676700e+00,
          -1.64458890e+00,  -2.23759500e-01,  -1.30112500e+00,
           7.49102200e-01,  -1.87749480e+00,   1.07524100e+00,
          -3.10137850e+00,   8.72907000e-02,  -2.87288980e+00,
           6.04921000e-02,   3.41494600e-01,  -3.15708000e-02,
          -9.81202300e-01,   1.08747280e+00,  -1.31349300e-01,
          -2.36914200e-01,  -1.61401060e+00,  -1.77694530e+00,
           6.83157700e-01,  -2.87857110e+00,   8.35182500e-01,
          -4.25080350e+00,  -6.75831700e-01,  -2.39793920e+00,
          -1.18431040e+00,   3.08506000e-01,  -2.20235610e+00,
          -2.14397410e+00,  -6.45676500e-01,   1.08856740e+00,
          -7.05370800e-01,   2.79533000e-02,  -1.99230590e+00,
          -2.25151100e-01,  -1.40683000e-02,  -3.54100300e-01,
           9.86625500e-01,  -1.63518400e+00,  -4.88748710e+00,
          -6.00678700e-01,  -1.88053500e+00,   3.70434800e-01,
          -2.34323060e+00,   6.51445000e-01],
        [ -7.57942500e-01,   3.64558600e-01,  -4.80018700e-01,
           9.08738600e-01,  -6.88678200e-01,  -1.30466830e+00,
          -1.49318750e+00,  -2.51052300e-01,  -8.38065300e-01,
           5.28746700e-01,   5.49934100e-01,  -3.42606930e+00,
           7.48656700e-01,  -9.22687100e-01,  -1.70769300e-01,
          -5.46389400e-01,  -8.67696900e-01,   2.22272100e-01,
           1.72367900e-01,   8.80045900e-01,   6.86769900e-01,
          -2.21057380e+00,  -4.96342200e-01,   3.26979800e-01,
          -1.09113560e+00,   7.59931000e-01,   3.89118900e-01,
          -1.62577910e+00,  -3.04279160e+00,  -1.37512600e-01,
          -2.69853030e+00,   1.04301040e+00,   4.32393900e-01,
          -6.39372800e-01,  -1.14986440e+00,  -1.22129120e+00,
           1.45859840e+00,  -1.14366360e+00,  -1.74368200e+00,
          -1.24967710e+00,  -9.74791600e-01,   5.25567400e-01,
           4.19968000e-01,  -1.65517800e-01,   1.17904800e-01,
          -2.16917590e+00,   1.93595900e-01,   1.42987230e+00,
          -1.54826990e+00,  -1.50397560e+00],
        [  5.29753100e-01,  -8.92509500e-01,   2.94961000e-02,
          -2.32535670e+00,   7.96773700e-01,  -3.95206010e+00,
           3.74592700e-01,   1.21427570e+00,  -4.72524300e-01,
          -1.46968530e+00,   1.96882250e+00,  -4.14605970e+00,
          -1.89481270e+00,  -1.31547380e+00,   1.30157480e+00,
          -1.00221260e+00,  -2.49095000e-02,  -1.95576460e+00,
          -2.77018600e-01,  -3.46543200e-01,  -1.77694530e+00,
          -5.53705000e-01,  -2.66655240e+00,   9.25289000e-02,
           6.91332300e-01,  -8.40612500e-01,   1.94545000e-01,
           7.10751600e-01,   1.43339260e+00,   8.86566700e-01,
          -1.34165970e+00,  -2.35366550e+00,   1.43225200e+00,
           1.31581450e+00,  -9.39731800e-01,  -4.83009400e-01,
          -2.34316700e-01,   5.68705000e-01,  -2.05211680e+00,
          -1.94849720e+00,  -8.82381000e-02,   1.20892100e-01,
           1.86079000e-02,   5.17862300e-01,   7.10961200e-01,
           8.88083600e-01,  -1.00945190e+00,   3.65215500e-01,
           9.91262400e-01,   6.26718000e-01],
        [ -6.05720900e-01,  -2.46298990e+00,   1.25364730e+00,
           1.90065390e+00,  -2.78040770e+00,  -3.44829900e-01,
           1.41627490e+00,   1.06228970e+00,   7.75340900e-01,
           1.19402650e+00,   2.77213600e-01,   8.33942200e-01,
          -1.94163510e+00,  -5.52281500e-01,  -2.08535220e+00,
           4.98862200e-01,  -9.81109800e-01,  -5.49698400e-01,
           6.33004600e-01,  -2.36516360e+00,   2.24281600e-01,
          -4.71545800e-01,  -1.96583420e+00,  -1.57290100e-01,
           9.80630100e-01,  -1.45761120e+00,  -8.82381000e-02,
          -1.04268190e+00,  -1.09581980e+00,  -2.11760410e+00,
           1.40296250e+00,   7.80435000e-01,   3.99707600e-01,
          -1.27796160e+00,   8.91334700e-01,   1.32604520e+00,
          -2.26482110e+00,  -1.88043180e+00,  -4.99962100e-01,
          -1.10640040e+00,  -1.20143630e+00,   5.08599600e-01,
          -5.95550000e-01,  -9.02656700e-01,   1.69078140e+00,
          -3.42606930e+00,  -2.94809400e-01,   3.27880000e-03,
          -1.97688890e+00,  -6.94431000e-02]]])

    # Variables choice model
    dict['AT_FSP'] = 10
    dict['TD_FSP'] = 10
    dict['Origin'] = np.array([0, 1, 1, 0, 0, 1, 0, 0, 1, 0])
    dict['AT_PSP'] = 10
    dict['TD_PSP'] = 10
    dict['AT_PUP'] = 5
    dict['TD_PUP'] = 10
    dict['Age_veh'] = np.array([0, 0, 0, 1, 0, 0, 1, 0, 0, 0])
    dict['Low_inc'] = np.array([1, 1, 1, 1, 0, 1, 1, 1, 1, 0])
    dict['Res'] = np.array([1, 1, 1, 0, 1, 1, 0, 0, 1, 1])

    # Big M value
    dict['M_rev'] = 50.0

    return dict

def preprocess(dict):
    ''' Precomputation on the data in order to create the corresponding
        cplex model.
    '''

    ########## Precomputation ##########
    # Priority list
    priority_list = np.empty([dict['I'] + 1, dict['N']])
    for i in range(dict['I'] + 1):
        min = 1
        max = dict['N']
        for n in range(dict['N']):
            if dict['choice_set'][i, n] == 1:
                priority_list[i, n] = min
                min += 1
            else:
                priority_list[i, n] = max
                max -= 1
    dict['priority_list'] = priority_list

    # Generate prices
    p = np.empty([dict['I'] + 1, dict['n_price_levels']])
    for i in range(dict['I'] + 1):
        p[i, :] = np.linspace(dict['lb_p'][i], dict['ub_p'][i], dict['n_price_levels'])
    dict['p'] = p

    # Exogene utility
    exo_utility = np.empty([dict['I'] + 1, dict['N']])
    for n in range(dict['N']):
        for i in range(dict['I'] + 1):
            if i == 0:
                # Opt-Out
                exo_utility[i, n] = (dict['Beta_AT'] * dict['AT_FSP'] +
                                       dict['Beta_TD'] * dict['TD_FSP'] +
                                       dict['Beta_Origin'] * dict['Origin'][n])
            elif i == 1:
                # PSP
                exo_utility[i, n] = (dict['ASC_PSP'] +
                                       dict['Beta_AT'] * dict['AT_PSP'] +
                                       dict['Beta_TD'] * dict['TD_PSP'])
            else:
                # PUP
                exo_utility[i, n] = (dict['ASC_PUP'] +
                                       dict['Beta_AT'] * dict['AT_PUP'] +
                                       dict['Beta_TD'] * dict['TD_PUP'] +
                                       dict['Beta_Age_Veh'] * dict['Age_veh'][n])
    dict['exo_utility'] = exo_utility

    # Beta coefficient for endogenous variables
    beta_FEE_PSP = np.empty([dict['N']])
    beta_FEE_PUP = np.empty([dict['N']])
    for n in range(dict['N']):
        beta_FEE_PSP[n] = (dict['Beta_FEE'] +
                             dict['Beta_FEE_INC_PSP'] * dict['Low_inc'][n] +
                             dict['Beta_FEE_RES_PSP'] * dict['Res'][n])
        beta_FEE_PUP[n] = (dict['Beta_FEE'] +
                             dict['Beta_FEE_INC_PUP'] * dict['Low_inc'][n] +
                             dict['Beta_FEE_RES_PUP'] * dict['Res'][n])
    dict['endo_coef'] = np.array([np.zeros([dict['N']]), beta_FEE_PSP, beta_FEE_PUP])

    # Calculate bounds on the utility
    lb_U = np.empty([dict['I'] + 1, dict['N'], dict['R']])
    ub_U = np.empty([dict['I'] + 1, dict['N'], dict['R']])
    lb_Umin = np.full((dict['N'], dict['R']), np.inf)
    ub_Umax = np.full((dict['N'], dict['R']), -np.inf)
    M = np.empty([dict['N'], dict['R']])
    for n in range(dict['N']):
        for r in range(dict['R']):
            for i in range(dict['I'] + 1):
                    if dict['endo_coef'][i, n] > 0:
                        lb_U[i, n, r] = (dict['endo_coef'][i, n] * dict['lb_p'][i] +
                                        dict['exo_utility'][i, n] + dict['xi'][i, n, r])
                        ub_U[i, n, r] = (dict['endo_coef'][i, n] * dict['ub_p'][i] +
                                        dict['exo_utility'][i, n] + dict['xi'][i, n, r])
                    else:
                        lb_U[i, n, r] = (dict['endo_coef'][i, n] * dict['ub_p'][i] +
                                        dict['exo_utility'][i, n] + dict['xi'][i, n, r])
                        ub_U[i, n, r] = (dict['endo_coef'][i, n] * dict['lb_p'][i] +
                                        dict['exo_utility'][i, n] + dict['xi'][i, n, r])
                    # Bound for each customer, for each draw
                    if lb_U[i, n, r] < lb_Umin[n, r]:
                        lb_Umin[n, r] = lb_U[i, n, r]
                    if ub_U[i, n, r] > ub_Umax[n, r]:
                        ub_Umax[n, r] = ub_U[i, n, r]

            # Calcule the big-M values
            M[n, r] = ub_Umax[n, r] - lb_Umin[n, r]
    dict['lb_U'] = lb_U
    dict['ub_U'] = ub_U
    dict['lb_Umin'] = lb_Umin
    dict['ub_Umax'] = ub_Umax
    dict['M_U'] = M

    # Precompute the choice of the customer

    # Tables to keep track of the customer choice. The entry correspond to the alternative id
    choices = np.full((dict['N'], dict['R'], dict['n_price_levels'], dict['n_price_levels']), None)
    # Table to keep track of the utility value for each customer, behavioral scenario, alternative and price level
    U = np.full((dict['N'], dict['R'], dict['I'] + 1, dict['n_price_levels']), None)

    # Fill out the tables
    for n in range(dict['N']):
        for r in range(dict['R']):
            # Utility for opt-out
            U[n, r, 0, :] = np.full((dict['n_price_levels']), dict['exo_utility'][0, n] + dict['xi'][0, n, r])
            # Define the strat indices to explore while filling out the tables
            strat_alt_1 = list(range(dict['n_price_levels']))
            strat_alt_2 = list(reversed(range(dict['n_price_levels'])))
            # Start exploring the tables
            for l1 in strat_alt_1:
                # Utility for alternative 1
                if U[n, r, 1, l1] is None:
                    U[n, r, 1, l1] = (dict['endo_coef'][1, n] * dict['p'][1, l1] +
                                    dict['exo_utility'][1, n] + dict['xi'][1, n, r])
                # Start by the entry where p1 is the lowest and p2 the highest
                for l2 in strat_alt_2:
                    # Utility for alternative 2
                    if U[n, r, 2, l2] is None:
                        U[n, r, 2, l2] = (dict['endo_coef'][2, n] * dict['p'][2, l2] +
                                        dict['exo_utility'][2, n] + dict['xi'][2, n, r])
                    # Compute the value in choices table
                    choices[n, r, l1, l2] = np.argmax([U[n, r, 0, l1], U[n, r, 1, l1], U[n, r, 2, l2]])
                    # Fill out the lower left part of the table if possible
                    if choices[n, r, l1, l2] == 2:
                        fill = np.full((dict['n_price_levels'] - l1, l2 + 1), 2)
                        choices[n, r, l1:, :(l2 + 1)] = fill
                        strat_alt_2 = strat_alt_2[:dict['n_price_levels'] - (l2 + 1)]
                        break

    # Rewrite the choices table in a more convenient way
    # The table w contains binary value.
    # 1 means that the customer chooses the corresponding alternative, 0 otherwise
    # If the entry is none, then the choice of the customer is not deterministic given the strategy
    # for the corresponding alternative
    w = np.full((dict['K'] + 1, dict['I'] + 1, dict['N'], dict['R'], dict['n_price_levels']), None)
    for n in range(dict['N']):
        for r in range(dict['R']):
            for l1 in range(dict['n_price_levels']):
                # Operator 1
                elem = choices[n, r, l1, 0]
                # Check if the row contains only one element
                if (choices[n, r, l1, :] == elem).sum() == len(choices[n, r, l1, :]):
                    for i in range(dict['I'] + 1):
                        if i == elem:
                            w[1 ,i, n, r, l1] = 1.0
                        else:
                            w[1, i, n, r, l1] = 0.0
                # Operator 2
                elem = choices[n, r, 0, l2]
                # Check if the column contains only one element
                if (choices[n, r, :, l2] == elem).sum() == len(choices[n, r, :, l2]):
                    for i in range(dict['I'] + 1):
                        if i == elem:
                            w[2 ,i, n, r, l2] = 1.0
                        else:
                            w[2, i, n, r, l2] = 0.0

    dict['wAft_precomputed'] = w

if __name__ == '__main__':
    dict = getData()
    preprocess(dict)
